<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World</title>
    <url>/2020/04/12/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>前端知识点总结</title>
    <url>/2020/04/13/%E5%89%8D%E7%AB%AF%E7%BB%BC%E5%90%88/</url>
    <content><![CDATA[<h1 id="前端综合"><a href="#前端综合" class="headerlink" title="前端综合"></a>前端综合</h1><h3 id="怎么看待前端开发？怎么看待前端工程师？前端的价值体现在哪？"><a href="#怎么看待前端开发？怎么看待前端工程师？前端的价值体现在哪？" class="headerlink" title="怎么看待前端开发？怎么看待前端工程师？前端的价值体现在哪？"></a>怎么看待前端开发？怎么看待前端工程师？前端的价值体现在哪？</h3><ul>
<li>前端工程师是将想法变成产品展示给用户的职位</li>
<li>前端工程师是最接近用户的开发工程师，可以提供给用户浏览器兼容支持，提供用户与产品的交互支持</li>
<li>前端工程师的价值体现在能够解决其他工程师解决不了的问题（这对于任何工程师职位都是成立的）。比如用户想要在PC端、ios、android、pad和tv端使用，怎样才能让用户操作方便；怎样才能让低宽带网络不显得太慢；怎样才能在不稳定连接时假装还能继续服务；</li>
</ul>
<h3 id="什么样的代码是好的代码"><a href="#什么样的代码是好的代码" class="headerlink" title="什么样的代码是好的代码"></a>什么样的代码是好的代码</h3><ul>
<li>代码是可工作的</li>
<li>代码是可读性高的</li>
<li>代码是易维护的</li>
<li>代码是高内聚低耦合的</li>
<li>代码应该是用更短的时间更小的内存</li>
</ul>
<h3 id="前端需要注意哪些SEO？"><a href="#前端需要注意哪些SEO？" class="headerlink" title="前端需要注意哪些SEO？"></a>前端需要注意哪些SEO？</h3><ul>
<li>合理的 <code>title</code>,  <code>description</code>, <code>keywords</code>: 搜索对这三项的权重逐个减小，<code>title</code>值强调重点即可，重要关键词不要出现超过2次，而且要靠前，不同页面<code>title</code>要有所不同；<code>description</code>把页面内容高度概括，长度合适，不可过分堆砌关键词，不同页面的<code>description</code>有所不同；<code>keywords</code>列举出重要关键词即可</li>
<li>语义化的<code>HTML</code>代码，符合W3C规范：语义化的代码让搜索引擎更容易理解网页</li>
<li>重要内容<code>HTML</code>代码放在前面：搜索引擎抓取<code>HTML</code>顺序是从上到下，有的搜索引擎对抓取长度有限制，保证重要内容一定会被抓取</li>
<li>重要内容不要用<code>js</code>输出：爬虫不执行<code>js</code>获取内容</li>
<li>少用<code>iframe</code>：搜索引擎不会抓取<code>iframe</code>中的内容</li>
<li>非装饰性图片必须加<code>alt</code></li>
<li>提高网站速度：网站速度是搜索引擎的一个重要指标</li>
</ul>
<h3 id="如何对网站性能进行优化"><a href="#如何对网站性能进行优化" class="headerlink" title="如何对网站性能进行优化"></a>如何对网站性能进行优化</h3><ul>
<li><p><code>content</code>方面</p>
<ul>
<li><p>减少<code>HTTP</code>请求：合并文件、<code>cssSprites</code></p>
</li>
<li><p>减少<code>DNS</code>查询：<code>DNS</code>缓存、将资源分布到恰当数量的主机名</p>
</li>
<li><p>减少<code>DOM</code>元素数量</p>
</li>
</ul>
</li>
<li><p><code>Server</code>方面</p>
<ul>
<li><p>使用<code>CDN</code></p>
</li>
<li><p>配置<code>ETag</code></p>
</li>
<li><p>对组件使用<code>Gzip</code>压缩</p>
</li>
</ul>
</li>
<li><p><code>Cookie</code>方面</p>
<ul>
<li>减少<code>cookie</code>大小</li>
</ul>
</li>
<li><p><code>css</code>方面</p>
<ul>
<li><p>将样式表放到页面顶部</p>
</li>
<li><p>不使用<code>css</code>表达式</p>
</li>
<li><p>使用<code>&lt;link&gt;</code>不使用<code>@import</code></p>
</li>
</ul>
</li>
<li><p><code>Javascript</code>方面</p>
<ul>
<li><p>将脚本放在页面底部</p>
</li>
<li><p>将<code>javascript</code>和<code>css</code>从外部引入</p>
</li>
<li><p>压缩<code>javascript</code>和<code>css</code></p>
</li>
<li><p>删除不必要的脚本</p>
</li>
<li><p>减少<code>DOM</code>访问</p>
</li>
</ul>
</li>
<li><p>图片方面</p>
<ul>
<li><p>优化图片：根据实际颜色需要选择色深、压缩</p>
</li>
<li><p>优化<code>cssSprites</code></p>
</li>
<li><p>不要在<code>HTML</code>中拉伸图片</p>
</li>
</ul>
</li>
</ul>
<h3 id="语义化的理解"><a href="#语义化的理解" class="headerlink" title="语义化的理解"></a>语义化的理解</h3><ul>
<li>用正确的标签做正确的事情</li>
<li><code>HTML</code>语义化就是让页面的内容结构化，便于浏览器、搜索引擎解析</li>
<li>在没有样式<code>CSS</code>情况下也以一种文档格式显示，并且是容易阅读的</li>
<li>搜索引擎的爬虫依赖于标记来确定上下文和各个关键字的权重，利于<code>SEO</code></li>
<li>使阅读源代码的人对网站更容易将网站分块，便于阅读维护理解</li>
</ul>
<h3 id="介绍一下你对浏览器内核的理解"><a href="#介绍一下你对浏览器内核的理解" class="headerlink" title="介绍一下你对浏览器内核的理解"></a>介绍一下你对浏览器内核的理解</h3><ul>
<li>主要分为两部分：渲染引擎(<code>Layout Engineer</code>或<code>Rendering Engineer</code>)和<code>JS</code>引擎</li>
<li>渲染引擎：负责获取网页的内容(<code>HTML</code>、<code>XML</code>、图像等)、整理讯息(例如加入<code>CSS</code>)等，以及计算网页的显示方式，然后会输出至显示器或者打印机。浏览器内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。所有网页浏览器，电子邮件客户端以及其它需要编辑、显示网络内容的应用程序都需要内核</li>
<li><code>JS</code>引擎：解析和执行<code>javascript</code>来实现网页的动态效果</li>
<li>最开始渲染引擎和<code>JS</code>引擎并没有区分很明确，后来<code>JS</code>引擎越来越独立，内核就倾向于只指渲染引擎</li>
</ul>
<h3 id="从浏览器地址栏输入URL到显示页面的步骤"><a href="#从浏览器地址栏输入URL到显示页面的步骤" class="headerlink" title="从浏览器地址栏输入URL到显示页面的步骤"></a>从浏览器地址栏输入URL到显示页面的步骤</h3><ol>
<li>浏览器将请求的URL交给DNS域名解析，找到真实IP，向服务器发起请求（DNS域名解析）（三次握手）</li>
<li>服务器将请求交给后台处理完成后返回数据，浏览器接收文件（HTML、CSS等文件）</li>
<li>浏览器解析接收到的文件，渲染并显示到显示屏上（浏览器渲染机制）</li>
<li>TCP四次握手关闭连接</li>
</ol>
<h3 id="常见浏览器内核"><a href="#常见浏览器内核" class="headerlink" title="常见浏览器内核"></a>常见浏览器内核</h3><ul>
<li>IE(9以前)=Trident+Jscript</li>
<li>IE(9以后)=Trident+Chakra</li>
<li>360=Trident+Blink</li>
<li>搜狗=Trident+WebKit</li>
<li>Firefox=Gecko+JagerMonkey</li>
<li>Safari=webkit=webcore+jscore</li>
<li>Chrome=Blink+v8</li>
<li>Opera=Blink+v8 </li>
</ul>
<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="1-Doctype有什么作用？严格模式与混杂模式如何区分？它们有何意义？"><a href="#1-Doctype有什么作用？严格模式与混杂模式如何区分？它们有何意义？" class="headerlink" title="1. Doctype有什么作用？严格模式与混杂模式如何区分？它们有何意义？"></a>1. Doctype有什么作用？严格模式与混杂模式如何区分？它们有何意义？</h3><ul>
<li>声明文件类型定义(<code>DTD</code>)，<code>&lt;!DOCTYPE&gt;</code>位于文档中最前面，处于<code>&lt;html&gt;</code>标签之前，作用是为了告知浏览器应该用那种文档类型规范来解析文档</li>
<li><code>DOCTYPE</code>不存在或者格式不正确会导致文档以混杂模式呈现</li>
<li>严格模式的排版和<code>JS</code>运作模式是以该浏览器支持的最高标准运行；混杂模式页面以宽松的向后兼容的方式显示，模拟老式浏览器的行为以防止站点无法工作</li>
</ul>
<h3 id="2-meta标签能用来做什么"><a href="#2-meta标签能用来做什么" class="headerlink" title="2. meta标签能用来做什么"></a>2. <code>meta</code>标签能用来做什么</h3><ul>
<li>提供给机器解读的一些元数据：页面搜索引擎优化、定义页面使用语言等等。有两个属性：</li>
</ul>
<ol>
<li><p><code>http-equiv + content</code></p>
<ul>
<li><code>charset</code>：编码格式</li>
<li><code>expires</code>：过期时间</li>
<li><code>refresh</code>：特定时间内自动刷新跳转</li>
<li><code>pragma</code>：禁止浏览器从本地计算机缓存中访问页面内容<code>no-cache</code></li>
<li><code>windows-target</code>：设定页面在窗口中以独立页面显示，防止被当成<code>frame</code>页调用</li>
<li><code>set-cookie</code>：自定义<code>cookie</code></li>
<li><code>content-type</code>：字符集</li>
</ul>
</li>
<li><p><code>name + content</code></p>
<ul>
<li><code>keywords</code>：关键字</li>
<li><code>description</code>：主要内容</li>
<li><code>robots</code>：<code>none</code>不被检索</li>
<li><code>author、generator</code>：使用的制作软件</li>
<li><code>copyright</code></li>
<li><code>viewport</code>：缩放比例</li>
</ul>
</li>
</ol>
<h3 id="3-src和href的区别"><a href="#3-src和href的区别" class="headerlink" title="3. src和href的区别"></a>3. <code>src</code>和<code>href</code>的区别</h3><ul>
<li><code>href</code>指向网络资源位置，建立当前文档和资源的连接，一般用于超链接</li>
<li><code>src</code>将资源嵌入当前文档中，在请求<code>src</code>资源时会将其指向的资源下载并应用到当前文档内，例如<code>JS</code>脚本，<code>img</code>图片和<code>iframe</code>等元素。当浏览器解析该元素时，会暂停其他资源的下载和处理，直到将该元素加载、编译、执行完毕，图片和框架等元素也是如此。</li>
</ul>
<h3 id="4-lt-img-gt-的title和alt有什么区别"><a href="#4-lt-img-gt-的title和alt有什么区别" class="headerlink" title="4. &lt;img&gt;的title和alt有什么区别"></a>4. <code>&lt;img&gt;</code>的<code>title</code>和<code>alt</code>有什么区别</h3><ul>
<li><code>title</code>属性，通常当鼠标滑动到元素上的时候显示</li>
<li><code>alt</code>是<code>&lt;img&gt;</code>的固有属性，是图片内容的等价描述，用于图片无法加载时显示，可提高图片的可访问性，出了纯装饰性图片外都必须设置有意义的值，搜索引擎会重点分析</li>
</ul>
<h3 id="iframe有什么缺点"><a href="#iframe有什么缺点" class="headerlink" title="iframe有什么缺点"></a><code>iframe</code>有什么缺点</h3><ul>
<li><code>iframe</code>会阻塞主页面的onload事件</li>
<li>搜索引擎的检索程序无法解读这种页面，不利于SEO</li>
<li><code>iframe</code>和主页面共享连接池，而浏览器对相同域的连接有限制，所以会影响页面的并行加载</li>
<li>如果需要使用<code>iframe</code>，最好通过<code>JS</code>动态给<code>iframe</code>添加<code>src</code>属性</li>
</ul>
<h3 id="xhtml和html有什么区别"><a href="#xhtml和html有什么区别" class="headerlink" title="xhtml和html有什么区别"></a><code>xhtml</code>和<code>html</code>有什么区别</h3><ul>
<li>功能上：<code>xhtml</code>可兼容各大浏览器，手机以及<code>pda</code>(手持终端)，并且浏览器能快速正确的编译网页</li>
<li>书写习惯：<code>xhtml</code>元素必须被正确嵌套、闭合、区分大小写，文档必须拥有根元素</li>
</ul>
<h3 id="HTML的全局属性-global-attribute-有哪些"><a href="#HTML的全局属性-global-attribute-有哪些" class="headerlink" title="HTML的全局属性(global attribute)有哪些"></a><code>HTML</code>的全局属性(<code>global attribute</code>)有哪些</h3><ul>
<li><code>class</code>：为元素设置类标识</li>
<li><code>data-*</code>：为元素增加自定义属性</li>
<li><code>draggable</code>：设置元素是否可拖拽</li>
<li><code>id</code>：元素<code>id</code>，文档内唯一</li>
<li><code>lang</code>：元素内容的语言</li>
<li><code>style</code>：行内<code>css</code>样式</li>
<li><code>title</code>：元素相关的建议信息</li>
</ul>
<h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><h3 id="HTML5为什么只需要写-lt-DOCTYPE-HTML-gt"><a href="#HTML5为什么只需要写-lt-DOCTYPE-HTML-gt" class="headerlink" title="HTML5为什么只需要写&lt;!DOCTYPE HTML&gt;"></a><code>HTML5</code>为什么只需要写<code>&lt;!DOCTYPE HTML&gt;</code></h3><ul>
<li><code>HTML5</code>不基于<code>SGML</code>，因此不需要对<code>DTD</code>进行引用，但是需要<code>doctype</code>来规范浏览器的行为</li>
</ul>
<h3 id="HTML5有哪些新特性、移除了那些元素"><a href="#HTML5有哪些新特性、移除了那些元素" class="headerlink" title="HTML5有哪些新特性、移除了那些元素"></a><code>HTML5</code>有哪些新特性、移除了那些元素</h3><ul>
<li><code>HTML5</code>现在已经不是<code>SGML</code>的子集，主要是关于图像、位置、存储、多任务等功能的增加：<ul>
<li>绘画<code>canvas</code></li>
<li>用于视频、音频的<code>video</code>和<code>audio</code>元素</li>
<li>本地离线存储<code>localStorage</code>长期存储数据，浏览器关闭后数据不丢失</li>
<li><code>sessionStorage</code>的数据在浏览器关闭后自动删除</li>
<li>语义化更好的内容元素，比如<code>article</code>、<code>footer</code>、<code>header</code>、<code>nav</code>、<code>section</code></li>
<li>表单控件：<code>calendar</code>、<code>date</code>、<code>time</code>、<code>email</code>、<code>url</code>、<code>search</code></li>
<li>新的技术：<code>webworker</code>、<code>websocket</code>、<code>geolocation</code></li>
</ul>
</li>
<li>移除的元素<ul>
<li>纯表现的元素：<code>basefont</code>、<code>big</code>、<code>center</code>、<code>font</code>、<code>s</code>、<code>strike</code>、<code>tt</code>、<code>u</code></li>
<li>对可用性产生负面影响的元素：<code>frame</code>、<code>frameset</code>、<code>noframes</code></li>
</ul>
</li>
<li>支持<code>HTML5</code>新标签<ul>
<li><code>IE8/IE7/IE6</code>支持通过<code>document.createElement</code>方法产生新标签，可以利用这一特性让这些浏览器支持<code>HTML5</code>新标签</li>
<li>浏览器支持新标签后，还需要添加标签默认样式</li>
</ul>
</li>
</ul>
<h3 id="canvas和svg有什么区别"><a href="#canvas和svg有什么区别" class="headerlink" title="canvas和svg有什么区别"></a><code>canvas</code>和<code>svg</code>有什么区别</h3><ul>
<li><code>svg</code>绘制出来的每一个图形元素都是独立的<code>DOM</code>结点，能够方便的绑定事件或用于修改。<code>canvas</code>输出的是一整幅画布</li>
<li><code>svg</code>输出的图形是矢量图形，后期可以修改参数来自由放大缩小，不会失真和锯齿。<code>canvas</code>输出标量画布，就像一张图片一样，放大会失真和锯齿</li>
<li><code>highcharts</code>底层使用svg；<code>echarts</code>底层使用canvas</li>
</ul>
<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="基础-1"><a href="#基础-1" class="headerlink" title="基础"></a>基础</h2><h3 id="页面导入样式时，使用link和-import有什么区别"><a href="#页面导入样式时，使用link和-import有什么区别" class="headerlink" title="页面导入样式时，使用link和@import有什么区别"></a>页面导入样式时，使用link和@import有什么区别</h3><ul>
<li>link属于XHTML标签，除了加载CSS外，还能用于定义RSS、定义rel连接属性等作用；而@import是CSS提供的，只能用于加载CSS</li>
<li>页面被加载时，link会同时被加载；而@import应用的CSS会等到页面被加载完再加载</li>
<li>@link是XHTML标签无兼容问题；而import是CSS2.1提出的，只在IE5以上才能被识别</li>
</ul>
<h3 id="position的属性及作用"><a href="#position的属性及作用" class="headerlink" title="position的属性及作用"></a><code>position</code>的属性及作用</h3><ul>
<li><code>static</code>：默认值，没有定位，元素出现在正常的文档流中，不会受left、top、right、bottom及z-index的影响</li>
<li><code>relative</code>：相对定位，相对其正常位置进行定位，可通过left、top、right、bottom的值来设置位置；并且原本所占的空间不变，即不会影响其他元素布局；经常被用来做绝对元素的容器块</li>
<li><code>absolute</code>：绝对定位，相对于最近的除<code>static</code>以外的第一个已定位的父元素，若没有则相对于html定位。脱离了文档流，不占据文档空间；若设置<code>absolute</code>，但没有设置top、left等值，其位置不变；若设置<code>absolute</code>，会影响未定义宽度的块级元素，使其变为包裹元素内容的宽度</li>
<li><code>fixed</code>：固定定位，相对于浏览器窗口定位，脱离文档流，不会随页面的滚动而变化</li>
<li><code>sticky</code>：粘性定位，该定位基于用户滚动的位置。它的行为就像<code>position:relative</code>；而当页面滚动超出目标区域时，它的表现就像<code>position:fixed;</code>，它会固定在目标位置。</li>
<li><code>inherit</code>：规定应该从父元素继承<code>position</code>属性的值</li>
</ul>
<h3 id="display的属性及作用"><a href="#display的属性及作用" class="headerlink" title="display的属性及作用"></a><code>display</code>的属性及作用</h3><ul>
<li><code>none</code>：该元素不会显示，并且该元素的空间也不存在，可理解为已删除</li>
<li><code>inline</code>：内联元素，与其他元素在一行；不可设置宽高；margin-top与margin-bottom无效，但margin-left和margin-right有效；padding-left和padding-right同样有效，但是padding-top和padding-bottom不会影响元素高度，会影响背景高度</li>
<li><code>inline-block</code>：行内块元素，既是内联元素，又可设置宽高以及行高及顶和底边距</li>
<li><code>block</code>：此元素显示为块级元素，此元素前后会带有换行符</li>
<li><code>inherit</code>：规定该元素从父元素集成<code>display</code>的值</li>
</ul>
<h3 id="CSS的盒子模型"><a href="#CSS的盒子模型" class="headerlink" title="CSS的盒子模型"></a>CSS的盒子模型</h3><ul>
<li>理解：所有HTML元素可以看作盒子。CSS盒模型本质上是一个盒子，封装周围的HTML元素</li>
<li>内容：边距（margin）、边框（border）、填充（padding）、内容（content）</li>
<li>包括：IE盒子模型，W3C盒子模型</li>
<li>区别：IE的content把border和padding也算了进去</li>
</ul>
<h3 id="BFC"><a href="#BFC" class="headerlink" title="BFC"></a>BFC</h3><ul>
<li>作用：它决定了元素如何对其内容进行定位，以及与其他元素的关系和相互作用</li>
<li>什么情况下会触发：<ul>
<li>根元素</li>
<li>设置了float属性，并且不为none</li>
<li>position属性设置为absolute或fixed</li>
<li>display为inline-block、table-cell、table-caption、flex、inline-flex</li>
<li>overflow属性不为visible</li>
</ul>
</li>
<li>作用：<ul>
<li>可以包含浮动元素</li>
<li>不被浮动元素覆盖</li>
<li>阻止父子元素的margin 折叠</li>
</ul>
</li>
</ul>
<h3 id="元素隐藏的方法和区别"><a href="#元素隐藏的方法和区别" class="headerlink" title="元素隐藏的方法和区别"></a>元素隐藏的方法和区别</h3><ul>
<li><code>display:none</code>：元素不可见、不占据空间、资源会加载、<code>DOM</code>可以访问</li>
<li><code>visibility:hidden</code>：元素不可见、不能点击、但占据空间、资源会加载、可以使用</li>
<li><code>opacity:0</code>：元素不可见、可以点击、占据空间、可以使用（若想不占据空间：<code>position:absolute</code>；不能点击不占据空间：<code>position:absolute;z-index:-1;</code>不能点击占据空间：<code>position:relative;z-index:-1;</code>）</li>
</ul>
<h3 id="display-none和visibility-hidden的却别"><a href="#display-none和visibility-hidden的却别" class="headerlink" title="display:none和visibility:hidden的却别"></a><code>display:none</code>和<code>visibility:hidden</code>的却别</h3><ul>
<li><code>display:none</code>元素不占据空间；<code>visibility:hidden</code>元素保留</li>
<li><code>display:none</code>会影响<code>opacity</code>过渡效果</li>
<li><code>display:none</code>会产生重绘回流；<code>visibility:hidden</code>只重绘</li>
<li><code>display:none</code>节点和子孙节点都不可见，<code>visibility:hidden</code>的子孙节点可以设置<code>visibility:visible</code>显示</li>
<li><code>visibility:hidden</code>不会影响计数器计数（<code>ol</code>标签）</li>
</ul>
<h3 id="rem、em和px的区别"><a href="#rem、em和px的区别" class="headerlink" title="rem、em和px的区别"></a><code>rem</code>、<code>em</code>和<code>px</code>的区别</h3><ul>
<li><code>px</code>：绝对长度单位</li>
<li><code>em</code>：相对长度单位，继承父级元素的字体大小，所有字体都是相对于父元素大小的</li>
<li><code>rem</code>：相对长度单位，相对于根元素（HTML）</li>
</ul>
<h3 id="浮动和清除浮动"><a href="#浮动和清除浮动" class="headerlink" title="浮动和清除浮动"></a>浮动和清除浮动</h3><ul>
<li><p>浮动：当元素设置为<code>float</code>后，该元素会脱离文档并向左或向右浮动，直到碰到父元素或另一个浮动元素，浮动元素会造成父元素高度塌陷，所以设置完浮动之后需要进行清除浮动</p>
</li>
<li><p>清除浮动：<code>BFC</code>、带有<code>clear:both</code>的空元素、伪元素<code>::after</code>+<code>clear:both</code></p>
<ul>
<li><code>BFC</code>：给父容器加上<code>overflow:hidden</code>形成<code>BFC</code>；需要计算超出的大小来隐藏，所以父容器会撑开放入子元素，同时计算浮动的子元素。<strong>一旦子元素大小超过父容器大小就会显示异常</strong></li>
<li>带有<code>clear:both</code>的空元素：在浮动元素后面添加一个带有<code>clear:both</code>属性的不浮动的空元素；**但是需要添加额外的<code>html</code>标签，这违背了语义化的原则</li>
<li>使用伪元素<code>::after</code>+<code>clear:both</code>：它在父容器尾部自动创建一个子元素，原理和空元素一样，可以把它设置为<code>height:0</code>不显示，<code>clear:both;display:block</code>，保证空白字符不浮动区块。（**但是<code>after</code>不支持<code>IE6</code>，只需要添加上<code>zoom:1</code>，这是激活父元素的<code>haslayout</code>属性，让父元素拥有自己的布局）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.clearifx</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line">	<span class="attribute">zoom</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="行内元素有哪些？块内元素有哪些？空元素有哪些？行内元素和块级元素有什么区别？"><a href="#行内元素有哪些？块内元素有哪些？空元素有哪些？行内元素和块级元素有什么区别？" class="headerlink" title="行内元素有哪些？块内元素有哪些？空元素有哪些？行内元素和块级元素有什么区别？"></a>行内元素有哪些？块内元素有哪些？空元素有哪些？行内元素和块级元素有什么区别？</h3><ul>
<li>行内元素有：<code>a b span img input select strong</code></li>
<li>块内元素有：<code>div ul ol li dl dt dd h1 h2 h3 h4 p...</code></li>
<li>空元素有：<code>br hr img input link meta</code></li>
<li>行内元素不可以设置宽高，不独占一行</li>
<li>块级元素可以设置宽高，独占一行</li>
</ul>
<h3 id="伪元素和伪类"><a href="#伪元素和伪类" class="headerlink" title="伪元素和伪类"></a>伪元素和伪类</h3><p><strong>伪类可以理解为是一种状态，而伪元素则代表一些实实在在存在的元素，但是它们都是抽象刻画的，游离于标准文档之外。</strong></p>
<p>伪类存在的意义是为了通过选择器，格式化dom树以外的信息（<code>:visited,:link</code>），以及不能被常规CSS选择器获取到的信息</p>
<p>（比如说获取第一个子元素，常规css选择器不行,可以用：<code>first-child</code>）。</p>
<p>伪类常用的有<code>first-child、last-child、nth-child、first-of-type</code> (父元素第一个特定的子元素)、<code>last-of-type、</code></p>
<p><code>nth-of-type、lang、focus 、lvha</code>（a标签四个）</p>
<p>伪元素可以创建一些文档语言无法创建的虚拟元素，比如文档语言没有一种机制可以描述元素内容第一个字母或者第一行，但是伪</p>
<p>元素可以<code>::first-letter,::first-line</code> 。同时伪元素还可以创建文档中不存在的内容比如说<code>::after,::before</code> </p>
<p>伪元素主要有：</p>
<p><code>::after,::before,::first-letter,::first-line,::selection</code></p>
<h3 id="CSS选择器的权重"><a href="#CSS选择器的权重" class="headerlink" title="CSS选择器的权重"></a>CSS选择器的权重</h3><ol start="0">
<li><p>!important 权重无限大</p>
</li>
<li><p>代表内联样式，如: style=””，权值为1000。</p>
</li>
<li><p>代表ID选择器，如：#content，权值为0100。</p>
</li>
<li><p>代表类，伪类和属性选择器，如.content，权值为0010。</p>
</li>
<li><p>代表类型选择器和伪元素选择器，如div p，权值为0001。</p>
</li>
<li><p>通配符、子选择器、相邻选择器等的。如*、&gt;、+,权值为0000。</p>
</li>
<li><p>继承的样式没有权值。</p>
</li>
</ol>
<h3 id="外边距重叠"><a href="#外边距重叠" class="headerlink" title="外边距重叠"></a>外边距重叠</h3><p>多个相邻(兄弟或父子) 普通流的块级元素在垂直方向的margin会重叠</p>
<ul>
<li>两个相邻的外边距都为正数，折叠结果是较大的值</li>
<li>两个相邻的外边距为负数，折叠结果是绝对值较大的值</li>
<li>两个相邻外边距为一正一负，折叠结果是他们的和</li>
</ul>
<h3 id="img和background-image的区别"><a href="#img和background-image的区别" class="headerlink" title="img和background-image的区别"></a>img和background-image的区别</h3><ul>
<li>解析机制：<code>img</code>属于<code>html</code>标签，<code>background-image</code>属于<code>css</code>，<code>img</code>先解析</li>
<li><code>SEO</code>：<code>img</code>标签有一个<code>alt</code>属性可以指定图像的替代文本，有利于<code>SEO</code>，并且图片加载失败时有利于阅读</li>
<li>语义化角度：<code>img</code>语义更加明确</li>
</ul>
<h3 id="rgba-和opacity的区别"><a href="#rgba-和opacity的区别" class="headerlink" title="rgba()和opacity的区别"></a>rgba()和opacity的区别</h3><ul>
<li><code>opacity</code>：作用于元素及元素中的所有内容，有继承性</li>
<li><code>rgba()</code>：只作用于元素的颜色和背景色</li>
<li>当<code>opacity</code>属性的值应用于某个元素时，把这个元素和它内容当做一个整体来看待，即使这个值没有被子元素继承。因此一个元素和它包含的元素都会有与元素背景相同的透明度，哪怕父子元素有不同的<code>opacity</code>值</li>
</ul>
<h3 id="outline和border的区别"><a href="#outline和border的区别" class="headerlink" title="outline和border的区别"></a>outline和border的区别</h3><ul>
<li><code>outline</code>轮廓是绘制于元素周围的一条线，位于边框边缘的外围，起到突出元素的作用</li>
<li><code>outline</code>的效果将随元素的<code>focus</code>而自动出现，相应的有由<code>blur</code>自动消失，这些是浏览器的默认行为</li>
<li><code>outline</code>不占据空间，不会像<code>border</code>那样影响元素的尺寸或者位置</li>
</ul>
<h3 id="脱离文档流的方式"><a href="#脱离文档流的方式" class="headerlink" title="脱离文档流的方式"></a>脱离文档流的方式</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:absolute</span></span><br><span class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:fixed</span></span><br><span class="line"><span class="selector-tag">float</span></span><br></pre></td></tr></table></figure>

<h3 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h3><p>z-index属性制定一个元素的堆叠顺序</p>
<p>拥有更高堆叠顺序的元素总是会处于堆叠顺序较低的元素前面</p>
<p><strong>注意：z-index进行定位元素（<code>postion:absolute, position:relative, position:fixed</code>）</strong></p>
<p>属性值：</p>
<ul>
<li><code>auto</code>：默认，堆叠顺序与父元素相等</li>
<li><code>number</code>：设置元素的堆叠顺序</li>
<li><code>inherit</code>：规定应该从父元素继承z-index的值</li>
</ul>
<h3 id="position和float的区别"><a href="#position和float的区别" class="headerlink" title="position和float的区别"></a>position和float的区别</h3><p>相同点：position设置absolute或fixed后和设置了float后都会脱离文档流</p>
<p>不同点：position相应的块级元素会覆盖下面的内容，而float只会覆盖块级元素，里面的文字会脱离</p>
<p><strong>文档流</strong>： 文档中可显示对象在排列时所占用的位置</p>
<h2 id="CSS3"><a href="#CSS3" class="headerlink" title="CSS3"></a>CSS3</h2><h3 id="CSS3有哪些新特性"><a href="#CSS3有哪些新特性" class="headerlink" title="CSS3有哪些新特性"></a>CSS3有哪些新特性</h3><ul>
<li>新增选择器：E：nth-child(n) E:nth-last-child(n)</li>
<li>Transition、Transform和Animation</li>
<li>边框：box-shadow,border-radius</li>
<li>背景：background-clip,background-size</li>
<li>文字：text-shadow,text-overflow</li>
<li>字体：@font-face</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@font-face</span>&#123;</span><br><span class="line">	<span class="attribute">font-family</span>:myFirstFont;</span><br><span class="line">	<span class="attribute">src</span>:<span class="built_in">url</span>(sansation_light,woff);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>线性渐变</li>
</ul>
<h3 id="CSS3的box-sizing值有哪些"><a href="#CSS3的box-sizing值有哪些" class="headerlink" title="CSS3的box-sizing值有哪些"></a>CSS3的<code>box-sizing</code>值有哪些</h3><p>box-sizing有三种属性，一种是content-box，一种是border-box,还有一个是从父元素继承的inherit。<br>现在还有一个padding-box。</p>
<ul>
<li>content-box 一 宽高应用到内容框</li>
<li>border-box — 宽高包括了内边距和边框</li>
<li>padding-box — 高宽包括了内边距</li>
</ul>
<h3 id="CSS动画如何实现"><a href="#CSS动画如何实现" class="headerlink" title="CSS动画如何实现"></a>CSS动画如何实现</h3><p>创建动画序列，需要animation属性或其子属性，属性允许配置动画时间、时长和动画细节。动画的实际表现由<code>@keyframes</code>实现</p>
<p>transtion也可以实现动画，但强调过渡，是元素的一个或多个属性变化时产生的过渡效果，同一个元素通过两个不同的途径获取样</p>
<p>式，而第二个途径当某种改变发生时（如：hover)才能获取样式，这样就会产生过渡动画。</p>
<h3 id="transition、animation的区别"><a href="#transition、animation的区别" class="headerlink" title="transition、animation的区别"></a>transition、animation的区别</h3><p><code>animation</code>和<code>transition</code>大部分属性相同，都是随时间改变元素的属性值，区别是<code>transition</code>需要触发一个事件才能改变属性；<code>animation</code>不需要触发任何事件随时间改变属性。<code>transition为2</code>帧，从<code>from……to</code> ，<code>animation</code>可以一帧一帧的。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transition</span>：</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">transition-property</span>:width;</span><br><span class="line">    <span class="attribute">transition-duration</span>:<span class="number">1s</span>;</span><br><span class="line">    <span class="attribute">transition-timing-function</span>:linear;</span><br><span class="line">    <span class="attribute">transition-delay</span>:<span class="number">25</span>;</span><br><span class="line">    <span class="comment">/*简写形式*/</span></span><br><span class="line">    <span class="attribute">transition</span>:width <span class="number">1s</span> linear <span class="number">25</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">transform</span>:</span><br><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">transform</span>:<span class="built_in">rotate</span>(<span class="number">7deg</span>);</span><br><span class="line">    <span class="attribute">-ms-transform</span>:<span class="built_in">rotate</span>(<span class="number">7deg</span>);<span class="comment">/*IE9*/</span></span><br><span class="line">    <span class="attribute">-moz-transform</span>:<span class="built_in">rotate</span>(<span class="number">7deg</span>);<span class="comment">/*FireFox*/</span></span><br><span class="line">    <span class="attribute">-webkit-transform</span>:<span class="built_in">rotate</span>(<span class="number">7deg</span>);<span class="comment">/*Safari和Chrome*/</span></span><br><span class="line">    <span class="attribute">-o-transform</span>:<span class="built_in">rotate</span>(<span class="number">7deg</span>);<span class="comment">/*Opwea*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">animation</span>:</span><br><span class="line"><span class="keyword">@keyframes</span> myAnimation&#123;</span><br><span class="line">    0%&#123;<span class="attribute">background</span>:red;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br><span class="line">    25%&#123;<span class="attribute">background</span>:orange;<span class="attribute">width</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">    50%&#123;<span class="attribute">background</span>:yellow;<span class="attribute">width</span>:<span class="number">100px</span>;&#125;</span><br><span class="line">    75%&#123;<span class="attribute">background</span>:green;<span class="attribute">width</span>:<span class="number">200px</span>;&#125;</span><br><span class="line">    100%&#123;<span class="attribute">background</span>:blue:width:<span class="number">100px</span>;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#box</span>&#123;</span><br><span class="line">    <span class="attribute">animation</span>:myAnimation <span class="number">5s</span>;</span><br><span class="line">    <span class="attribute">width</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="布局"><a href="#布局" class="headerlink" title="布局"></a>布局</h2><h3 id="水平居中的实现方案"><a href="#水平居中的实现方案" class="headerlink" title="水平居中的实现方案"></a>水平居中的实现方案</h3><ul>
<li>块级元素撑满父元素：如果宽度一定，在子元素添加<code>margin:auto</code>就可以平分剩余空间</li>
<li>行内块居中：把父元素设置为<code>text-align:center</code>，之后子元素设置<code>display:inline-block</code></li>
<li>绝对定位：<code>position:absolute;</code>，<strong>但是不会撑满父级元素</strong></li>
<li>相对定位：<code>position:relative;</code>，会撑满父级元素</li>
<li><code>flex</code>：父元素<code>display:flex; justify-content:center;</code></li>
</ul>
<h3 id="垂直居中的实现方案"><a href="#垂直居中的实现方案" class="headerlink" title="垂直居中的实现方案"></a>垂直居中的实现方案</h3><ul>
<li><p>元素无高度</p>
<p>利用内边距，让块级文字包裹在padding中，实现垂直居中</p>
</li>
<li><p>父元素高度确定的单行文本</p>
<p>使用行高的特性：父元素设置<code>height:line-height</code>即可</p>
</li>
<li><p>父元素高度确定的多行文本</p>
<ul>
<li>父元素设置<code>display:table</code>，子元素设置<code>display:table-cell; vertical-align:middle</code></li>
<li>子元素设置<code>display:inline-block</code>，父元素设置<code>line-height=height</code></li>
</ul>
</li>
<li><p>父元素高度未知</p>
<ul>
<li>绝对定位，设置<code>top:50%</code></li>
</ul>
</li>
<li><p><code>flex·</code></p>
<p>父元素设置：<code>display:flex; align-items:center;</code></p>
</li>
</ul>
<h3 id="垂直水平居中的实现方案"><a href="#垂直水平居中的实现方案" class="headerlink" title="垂直水平居中的实现方案"></a>垂直水平居中的实现方案</h3><ul>
<li><p>居中元素宽高已知</p>
<ul>
<li><p>利用绝对定位和margin</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">parent</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">child</span>&#123;</span><br><span class="line">    <span class="attribute">postion</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-top</span>:(-h/<span class="number">2</span>)px;</span><br><span class="line">    <span class="attribute">margin-left</span>:(-h/<span class="number">2</span>)px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>absolute</code>+<code>margin:auto</code></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">child</span>&#123;</span><br><span class="line">	<span class="attribute">width</span>:<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">right</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">margin</span>:auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>用<code>calu</code>计算</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">child</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>:absolute;</span><br><span class="line">    <span class="attribute">top</span>:<span class="built_in">calu</span>(<span class="number">50%</span>-<span class="number">50px</span>);</span><br><span class="line">    <span class="attribute">left</span>:<span class="built_in">calu</span>(<span class="number">50%</span>-<span class="number">50px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>垂直元素的宽高未知</p>
<ul>
<li><p><code>transform</code>的<code>translate</code>方法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">child</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>flex</code>布局</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">child</span>&#123;</span><br><span class="line">	<span class="attribute">display</span>:flex;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<h3 id="Flex布局"><a href="#Flex布局" class="headerlink" title="Flex布局"></a>Flex布局</h3><p><code>flex</code>是弹性布局，用来为盒装模型提供最大的灵活性。布局的传统解决方案基于盒装模型，依赖<code>display</code>、<code>position</code>、和<code>float</code>属性，任何一个容器都可以指定为<code>flex</code>布局</p>
<p><strong>注意</strong>：<strong>设置为<code>flex</code>布局后，子元素的<code>float</code>、<code>clear</code>、<code>vertical-align</code>属性会失效</strong></p>
<p><code>flex</code>属性分为容器属性和元素属性：</p>
<ul>
<li><p>容器属性包括：</p>
<ul>
<li><p><code>flex-direaction</code>：决定主轴方向</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">    <span class="attribute">flex-direaction</span>: row|row-reverse|column|column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>flex-wrap</code>：决定了如何换行</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">flex-wrap</span>: nowrap|wrap|wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>flex-flow</code>：上面两个的简写</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">flex-flow</span>: &lt;flex-direaction&gt;||&lt;flex-wrap&gt;;		</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>justify-content</code>：水平轴对齐方式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">justify-content</span>: flex-start|flex-end|center|space-between|space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>align-items</code>：垂直轴对齐方式</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123;</span><br><span class="line">	<span class="attribute">align-items</span>: flex-start|flex-end|center|space-between|space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>元素属性<code>align-content</code></p>
<ul>
<li><code>order</code>：定义项目的排序顺序，越小越靠前</li>
<li><code>flex-grow</code>：放大比例，默认是0，即使存在空间也不会放大，1是说等分剩余空间</li>
<li><code>flex-shrink</code>：缩小比例，当空间不够的情况下，会等比缩小；为0不缩小，为1等比缩小</li>
<li><code>flex-basis</code>：定义分配多余空间时，项目占据的控件</li>
<li><code>flex</code>上面三个属性的缩写，默认是0 1 auto。后两个属性可选</li>
<li><code>align-self</code>：允许单个与其他不一样的方式，可以覆盖<code>align-item</code>的属性，默认是<code>auto</code>表示继承</li>
</ul>
</li>
</ul>
<h3 id="Grid布局"><a href="#Grid布局" class="headerlink" title="Grid布局"></a>Grid布局</h3><p>容器属性</p>
<ul>
<li>display:grid 指定一个容器采用网格布局</li>
<li>grid-template-columns 定义每一列的列宽 可以用百分比</li>
<li>grid-template-rows 定义每一行的行高 可以用百分比</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*九宫格布局*/</span></span><br><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:gird;</span><br><span class="line">    <span class="attribute">grid-template-columns</span>:<span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">    <span class="attribute">grid-template-rows</span>:<span class="number">33.33%</span> <span class="number">33.33%</span> <span class="number">33.33%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>grid-row-gap 行间距</li>
<li>grid-column-gap 列间距</li>
<li>grid-gap 上面两个的简写</li>
</ul>
<h3 id="静态布局"><a href="#静态布局" class="headerlink" title="静态布局"></a>静态布局</h3><p><strong>特点</strong>：不管浏览器尺寸是多少，网页布局始终按照最初写代码时的布局来显示</p>
<p>一般都使用<code>min-width</code>定宽，小于这个宽度就会出现滚动条，大于就内容居中加背景</p>
<p><strong>设计方法</strong>：</p>
<ul>
<li>PC端居中布局所有样式绝对宽高，设计一个<code>layout</code>，在屏幕宽高有调整时，使用横向和竖向滚动条来查阅被遮掩的部分</li>
<li>移动设备另外建立，单独设计一个布局，使用不同的域名如<code>wap</code>或<code>m</code></li>
</ul>
<h3 id="流式布局"><a href="#流式布局" class="headerlink" title="流式布局"></a>流式布局</h3><p><strong>特点</strong>：屏幕分辨率变化时，页面里元素的大小会变化但布局不变。<strong>导致如果屏幕太大或太小都会导致元素无法正常显示</strong></p>
<p><strong>设计方法</strong>：使用<code>%</code>百分比定义宽度，高度大都是用<code>px</code>来固定住，可以根据可视区域<code>viewport</code>和父元素的实时尺寸进行调整，尽可能的适应各种分辨率。往往配合<code>max-width/min-width</code>等属性控制尺寸流动以免过大或者过小影响阅读</p>
<p>这种布局方式在Web前端开发的早期历史上，用来应对不同尺寸的PC屏幕（那时屏幕尺寸的差异不会太大），在当今的移动端开发也是常用布局方式，但缺点明显：<strong>如果屏幕尺度跨度太大，那么在相对其原始设计而言过小或过大的屏幕上不能正常显示</strong>。因为宽度使用<code>%</code>百分比定义，但是高度和文字大小等大都是用<code>px</code>来固定，所以在大屏幕的手机下显示效果会变成有些页面元素宽度被拉的很长，但是高度、文字大小还是和原来一样，显示非常不协调。</p>
<h3 id="自适应布局"><a href="#自适应布局" class="headerlink" title="自适应布局"></a>自适应布局</h3><p><strong>特点</strong>：屏幕分辨率变化时，页面里元素位置会变化而大小不会变化</p>
<p><strong>设计方法</strong>：使用<code>@media</code>媒体查询给不同尺寸和介质的设备切换不同的样式。在优秀的响应范围设计下可以给适配范围内的设备最好的体验，在同一个设备下实际还是固定的布局</p>
<h3 id="响应式布局"><a href="#响应式布局" class="headerlink" title="响应式布局"></a>响应式布局</h3><p><strong>特点</strong>：每个屏幕分辨率下都会有一个布局样式，即元素大小位置都会变。</p>
<p><strong>设计方法</strong>：<strong>媒体查询+流式布局</strong>，通常使用<code>@media</code>媒体查询和网格系统（<code>Grid System</code>）配合相对布局单位进行布局。实际上就是综合响应式、流动等上述技术通过<code>CSS</code>给单一网页不同设备返回不同样式的技术统称</p>
<p><strong>优点</strong>：适应PC端和移动端，如果足够耐心，效果完美</p>
<p><strong>缺点</strong>：（1）媒体查询是有限的，也就是可以枚举出来的，只能适应主流的宽高。（2）要匹配足够多的屏幕大小，工作量不小，设计也需要多个版本</p>
<h3 id="弹性布局"><a href="#弹性布局" class="headerlink" title="弹性布局"></a>弹性布局</h3><p><strong>特点</strong>：包裹文字的各元素的尺寸采用<code>em/rem</code>做单位，而页面的主要划分区域的尺寸仍使用百分数或<code>px</code>做单位（同「流式布局」或「静态/固定布局」）。早期浏览器不支持整个页面按比例缩放，仅支持网页内文字尺寸的放大，这种情况下。使用<code>em/rem</code>做单位，可以使包裹文字的元素随着文字的缩放而缩放。</p>
<h2 id="CSS模块化-未完成"><a href="#CSS模块化-未完成" class="headerlink" title="CSS模块化(未完成)"></a>CSS模块化(未完成)</h2><h1 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a><code>Javascript</code></h1><h2 id="基础-2"><a href="#基础-2" class="headerlink" title="基础"></a>基础</h2><h3 id="写JavaScript的基本规范"><a href="#写JavaScript的基本规范" class="headerlink" title="写JavaScript的基本规范"></a>写<code>JavaScript</code>的基本规范</h3><ul>
<li>不要在同一行声明多个变量</li>
<li>使用<code>===/!==</code>来比较<code>true/false</code>或者数值</li>
<li>使用对象字面量替代<code>new Array</code>这种形式</li>
<li>不要使用全局函数</li>
<li><code>switch</code>语句必须带有<code>default</code>分支</li>
<li><code>if</code>语句必须使用大括号</li>
<li><code>for-in</code>循环中的变量应该使用<code>var</code>关键字限定作用域，从而避免作用域污染</li>
</ul>
<h3 id="javascript-代码中的-quot-use-strict-quot-是什么意思-使用它区别是什么？"><a href="#javascript-代码中的-quot-use-strict-quot-是什么意思-使用它区别是什么？" class="headerlink" title="javascript 代码中的&quot;use strict&quot;是什么意思 ? 使用它区别是什么？"></a><code>javascript</code> 代码中的<code>&quot;use strict&quot;</code>是什么意思 ? 使用它区别是什么？</h3><p><code>use strict</code>是一种<code>ECMAscript 5</code>添加的（严格）运行模式，这种模式使得 <code>Javascript</code>在更严格的条件下运行，使<code>JS</code>编码更加规范化的模式，消除<code>Javascript</code>语法的一些不合理、不严谨之处，减少一些怪异行为</p>
<h3 id="严格模式的限制"><a href="#严格模式的限制" class="headerlink" title="严格模式的限制"></a>严格模式的限制</h3><ul>
<li>变量必须先声明再使用</li>
<li>函数的参数不能有同名属性，否则报错</li>
<li>不能使用<code>with</code>语句</li>
<li>禁止<code>this</code>指向全局对象</li>
</ul>
<h3 id="JavaScript的基本数据类型"><a href="#JavaScript的基本数据类型" class="headerlink" title="JavaScript的基本数据类型"></a><code>JavaScript</code>的基本数据类型</h3><p><code>undefined</code>、<code>null</code>、<code>boolean</code>、<code>number</code>、<code>string</code>、<code>symbol</code>（表示独一无二的值，常是用来定义对象的唯一属性名）</p>
<h3 id="JavaScript有哪些内置对象"><a href="#JavaScript有哪些内置对象" class="headerlink" title="JavaScript有哪些内置对象"></a><code>JavaScript</code>有哪些内置对象</h3><ul>
<li><code>Object</code>是<code>JavaScript</code>中所有对象的父对象</li>
<li>数据封装类对象：<code>Object</code>、<code>Array</code>、<code>Boolean</code>、<code>Number</code>、<code>String</code></li>
<li>其他对象：<code>Function</code>、<code>Arguments</code>、<code>Math</code>、<code>Date</code>、<code>RegExp</code>、<code>Error</code></li>
</ul>
<h3 id="基本数据类型与对象类型的区别"><a href="#基本数据类型与对象类型的区别" class="headerlink" title="基本数据类型与对象类型的区别"></a>基本数据类型与对象类型的区别</h3><ul>
<li>基本类型存储的是值，对象类型存储的是地址</li>
<li>当创建了一个对象类型的时候，计算机会在内存中开辟一个空间来存放值，我们会引用这个地址(指针)来使用这个对象</li>
</ul>
<h3 id="typeof和instanceof"><a href="#typeof和instanceof" class="headerlink" title="typeof和instanceof"></a><code>typeof</code>和<code>instanceof</code></h3><ul>
<li><code>typeof</code>对于基本数据类型来说，除<code>null</code>会显示成<code>Object</code>，其余都可以显示正确的类型；<code>typeof</code>对于对象来说，除了函数都会显示<code>Object</code>；所以<code>typeof</code>并不能准确判断变量到底是什么类型</li>
<li>如果想判断一个对象的正确类型可以使用<code>instanceof</code>，因为内部机制是通过原型链来判断的</li>
</ul>
<h3 id="如何判断一个对象类型是数组"><a href="#如何判断一个对象类型是数组" class="headerlink" title="如何判断一个对象类型是数组"></a>如何判断一个对象类型是数组</h3><ul>
<li>用<code>instanceof</code>判断：<code>xxx instanceof Array</code></li>
<li>用<code>class</code>属性判断：<code>Object.prototype.toString.call(obj) === &#39;[Object Array]&#39;</code></li>
<li>用<code>isArray</code>判断</li>
</ul>
<h3 id="null和undefined的区别"><a href="#null和undefined的区别" class="headerlink" title="null和undefined的区别"></a><code>null</code>和<code>undefined</code>的区别</h3><ul>
<li><code>undefined</code>：表示不存在这个值；是一个表示”无”的原始值或者说表示”缺少值”，就是此处应该有一个值，但是还没有被定义，当尝试读取时会返回<code>undefined</code>。例如变量被声明了但是没有赋值，就等于<code>undefined</code></li>
<li><code>null</code>：表示一个对象被定义了，值为”空值”；是一个空对象（没有任何属性和方法）；例如作为函数的参数，表示该函数的参数不是对象</li>
<li>在验证<code>null</code>时，一定要使用 <code>===</code>，因为<code>==</code>无法区分<code>null</code>和<code>undefined</code></li>
</ul>
<h3 id="eval函数是做什么的"><a href="#eval函数是做什么的" class="headerlink" title="eval函数是做什么的"></a><code>eval</code>函数是做什么的</h3><ul>
<li><p>把对应的字符串解析成<code>JS</code>代码并执行</p>
</li>
<li><p>应该避免使用<code>eval</code>，不安全，非常耗性能（2次，一次解析成<code>js</code>语句，一次执行）</p>
</li>
<li><p>由<code>js</code>字符串转换为<code>JSON</code>对象的时候可以用<code>eval</code>：<code>var obj = eval(&#39;(&#39; + str + &#39;)&#39;)</code></p>
</li>
</ul>
<h3 id="call函数"><a href="#call函数" class="headerlink" title="call函数"></a>call函数</h3><ul>
<li>用法：<code>call(this, ...args)</code></li>
<li>本质：往要绑定的<code>context</code>对象下添加函数，然后执行，最后将属性删除。 当context值为null，或者undefined时，非严格模式下，它将替换为window或者global全局变量</li>
<li>源码：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prorotype.call = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = context || <span class="built_in">window</span>;</span><br><span class="line">    context.fn = <span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> args = [];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>, len = <span class="built_in">arguments</span>.length; i &lt; len; i++)&#123;</span><br><span class="line">        args.push(<span class="string">'arguments['</span> + i + <span class="string">']'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> result = <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + args + <span class="string">')'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="apply函数"><a href="#apply函数" class="headerlink" title="apply函数"></a>apply函数</h3><ul>
<li>用法：<code>apply(this, [arguments])</code></li>
<li>本质：往要绑定的<code>context</code>对象下添加函数，然后执行，最后将属性删除。 当context值为null，或者undefined时，非严格模式下，它将替换为window或者global全局变量</li>
<li>源码：</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.apply = <span class="function"><span class="keyword">function</span>(<span class="params">context</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> context = <span class="built_in">Object</span>(context) || <span class="built_in">window</span>;</span><br><span class="line">    context.fn = <span class="keyword">this</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> result;</span><br><span class="line">    <span class="keyword">if</span>(!arr)&#123;</span><br><span class="line">        result = context.fn();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> args = [];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; len = arr.length; i &lt; len; i++)&#123;</span><br><span class="line">            args.push(<span class="string">'arr['</span> + i + <span class="string">']'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        result = <span class="built_in">eval</span>(<span class="string">'context.fn('</span> + args + <span class="string">')'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> context.fn;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><ul>
<li><p>用法：<code>var fn = bind(this, ...arguments);fn(...newarguments);</code></p>
</li>
<li><p>原理：<code>bind</code>不会立即执行，而是返回一个函数，一般情况下，该函数执行时的<code>this</code>指向绑定的对象。而麻烦的是<code>JS</code>中函数还可以通过<code>new</code>来实例化，而实例化后的<code>this</code>指向新创建的对象。所以该函数的内部进行了额外的处理，看它是否是通过<code>new</code>创建的实例，如果是通过<code>new</code>创建的实例，<code>this</code>对象指向新创建的<code>new</code>对象实例</p>
</li>
<li><p>源码：</p>
</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">Function</span>.prototype.bind)&#123;</span><br><span class="line">    <span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span>(<span class="params">oThis</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="keyword">this</span> !== <span class="string">"function"</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">TypeError</span>(<span class="string">"Function.prototype.bind - what is trying to be bound is not callable"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>),</span><br><span class="line">            fToBind = <span class="keyword">this</span>,</span><br><span class="line">            fNOP = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">            fBound = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> fToBind.apply(<span class="keyword">this</span> <span class="keyword">instanceof</span> fNOP</span><br><span class="line">                                    ? <span class="keyword">this</span></span><br><span class="line">                                    : oThis || <span class="keyword">this</span>,</span><br><span class="line">                                    aArgs.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)));</span><br><span class="line">            &#125;;</span><br><span class="line">        </span><br><span class="line">        fNOP.prototype = <span class="keyword">this</span>.prototype;</span><br><span class="line">        fBound.prototype = <span class="keyword">new</span> fNOP();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> fBound;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="为什么call函数比apply函数高效"><a href="#为什么call函数比apply函数高效" class="headerlink" title="为什么call函数比apply函数高效"></a>为什么call函数比apply函数高效</h3><p><code>Function.prototype.apply (thisArg, argArray)</code></p>
<p>1、 如果IsCallable（Function）为false，即Function不可以被调用，则抛出一个TypeError异常。<br>2、如果argArray为null或未定义，则返回调用function的[[Call]]内部方法的结果，提供thisArg和一个空数组作为参数。<br>3、如果 Type（argArray）不是Object，则抛出TypeError异常。<br>4、获取argArray的长度。调用argArray的[[Get]]内部方法，找到属性length。 赋值给len。<br>5、定义 n 为ToUint32（len）。ToUint32（len）方法：将其参数len转换为范围为0到2^32-1的2^32个整数值中的一个。<br>6、初始化 argList 为一个空列表。<br>7、初始化 index 为 0。<br>8、循环迭代取出argArray。重复循环 while（index &lt; n）<br>      a、将下标转换成String类型。初始化 indexName 为 ToString(index).<br>      b、定义 nextArg 为 使用 indexName 作为参数调用argArray的[[Get]]内部方法的结果。<br>      c、将 nextArg 添加到 argList 中，作为最后一个元素。<br>      d、设置 index ＝ index＋1<br>9、返回调用func的[[Call]]内部方法的结果，提供thisArg作为该值，argList作为参数列表。</p>
<p><code>Function.prototype.call (thisArg [ , arg1 [ , arg2, … ] ] )</code></p>
<p>1、如果 IsCallable（Function）为false，即Function不可以被调用，则抛出一个TypeError异常。<br>2、定义argList 为一个空列表。<br>3、如果使用超过一个参数调用此方法，则以从arg1开始的从左到右的顺序将每个参数附加为argList的最后一个元素<br>4、返回调用func的[[Call]]内部方法的结果，提供thisArg作为该值，argList作为参数列表</p>
<p><strong>结论</strong>: 比较<code>apply</code>与<code>call</code>调用过程的不同，我们可以得出apply比call慢的原因主要是<code>apply</code>方法中，对<code>argArray</code>的参数有多次判断，执行步骤比call多。 </p>
<h2 id="类型转换"><a href="#类型转换" class="headerlink" title="类型转换"></a>类型转换</h2><p><strong>在JS中类型转换只有三种情况，分别是：</strong></p>
<ul>
<li>转换为布尔型</li>
<li>转换为数字</li>
<li>转换为字符串</li>
</ul>
<h3 id="转换为Boolean"><a href="#转换为Boolean" class="headerlink" title="转换为Boolean"></a>转换为Boolean</h3><p>在条件判断时，除了<code>undefined</code>、<code>null</code>、<code>false</code>、<code>NaN</code>、<code>&#39;&#39;</code>、<code>0</code>、<code>-0</code>，其他所有值都转为<code>true</code>，包括所有对象</p>
<h3 id="对象转基本数据类型"><a href="#对象转基本数据类型" class="headerlink" title="对象转基本数据类型"></a>对象转基本数据类型</h3><p><strong>对象在转换类型的时候，会调用内置的<code>[[ToPrimitive]]</code>函数，对于该函数来说，算法逻辑一般如下：</strong></p>
<ul>
<li>如果已经是基本数据类型，就不需要转换了</li>
<li>如果需要转字符串就调用<code>x.toString()</code></li>
<li>如果需要转为数值就调用<code>x.valueOf()</code></li>
<li>如果都没有返回基本数据类型，就会报错</li>
</ul>
<p><strong>可以重写<code>Symbol.toPrimitive</code>，该方法在转基本数据类型时调用优先级最高</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">    valueOf()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    toString()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'1'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    [<span class="built_in">Symbol</span>.toPrimitive]()&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="number">1</span> + a   <span class="comment">// =&gt; 3</span></span><br></pre></td></tr></table></figure>

<h3 id="四则运算符"><a href="#四则运算符" class="headerlink" title="四则运算符"></a>四则运算符</h3><p><strong>加法运算符</strong>：</p>
<ul>
<li>运算中其中一方为字符串，那么就会把另一方也转换为字符串</li>
<li>如果其中一方不是字符串或数字，那么会将它转换为数字或字符串</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> + <span class="string">'1'</span> =&gt; <span class="string">'11'</span>  <span class="comment">//触发特点一，将数字1转换为字符串，得到结果'11'             </span></span><br><span class="line"><span class="literal">true</span> + <span class="function"><span class="params">true</span> =&gt;</span> <span class="number">2</span>  <span class="comment">//触发特点二，将 true 转换为数字1</span></span><br><span class="line"><span class="number">4</span> + [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>] =&gt; <span class="string">'41,2,3'</span>  <span class="comment">//触发特点二，将数组转换为字符串'1,2,3'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>表达式<code>&#39;a&#39; + + &#39;b&#39; =&gt; &#39;aNaN&#39;</code>因为<code>+ &#39;b&#39;</code>等于<code>NaN</code>，所以结果为<code>&#39;aNaN&#39;</code></li>
</ul>
<p><strong>除了加法运算符：只要其中一方是数字，那么另外一方也会转换为数字</strong></p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">4</span> * <span class="string">'3'</span> =&gt; <span class="number">12</span></span><br><span class="line"><span class="number">4</span> * [] =&gt; <span class="number">0</span></span><br><span class="line"><span class="number">4</span> * [<span class="number">1</span>,<span class="number">2</span>] =&gt; <span class="literal">NaN</span></span><br></pre></td></tr></table></figure>

<h3 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h3><ol>
<li>如果是对象，就通过 toPrimitive 转换对象</li>
<li>如果是字符串，就通过 unicode 字符索引来比较</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">valueOf() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;,</span><br><span class="line">toString() &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">'1'</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">a &gt; <span class="number">-1</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>在以上代码中，因为 a 是对象，所以会通过 valueOf 转换为原始类型再比较值。</p>
<h3 id="和"><a href="#和" class="headerlink" title="==和==="></a>==和===</h3><ul>
<li>Boolean，number，string三类比较的时候把值转换成数字，在看转换结果是否相等。证明：<br>（’1’==true) 是真 （’abc’==true）是假。</li>
<li>undefined 参与比较，换成了NaN,所以其他三个类型跟它比较都是false，跟null类型比较的时候<br>是true。（NaN==NaN)是假</li>
<li>null参与比较，被当成对象，因为null没有valueof和toString，除了undefined谁跟他比较都是<br>false。</li>
<li>值类型与对象比较：先调用对象valueof 如果仍返回对象，调用tostring，如果还是没有就不等。</li>
</ul>
<p><strong>注意</strong>：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">[]==![]</span><br><span class="line"><span class="comment">// false =&gt; 首先先执行的是![]，它会得到false。然后[]==false，返回true。</span></span><br><span class="line"></span><br><span class="line">[]==[],&#123;&#125;==&#123;&#125;</span><br><span class="line"><span class="comment">// flase false</span></span><br><span class="line"><span class="comment">// 类型一致，它们是引用类型，地址是不一样的，所以为false!</span></span><br></pre></td></tr></table></figure>

<p>对于<code>===</code>来说，就是判断两者类型和值是否相同。</p>
<h2 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h2><p>js有两种属性值：数据属性 访问器属性</p>
<h3 id="数据属性"><a href="#数据属性" class="headerlink" title="数据属性"></a>数据属性</h3><p><strong>作用</strong>：包含一个数据值的位置</p>
<p><strong>特性</strong>：</p>
<ul>
<li>Configurable 表示能否通过delete删除属性从而重新定义属性，默认为true</li>
<li>Enumerable 表示能否通过for-in循环返回属性，默认为true</li>
<li>Writable 表示能否修改属性的值，默认为true</li>
<li>Value 包含这个属性的数据值 默认为undefined</li>
</ul>
<p><strong>修改属性默认值</strong></p>
<p>使用<code>Object.defineProperty(obj,attr,{})</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">'name'</span>,&#123;</span><br><span class="line">    wirtable:<span class="literal">false</span>,</span><br><span class="line">    value:<span class="string">'xxxx'</span>,</span><br><span class="line">    configurable:<span class="literal">false</span>; <span class="comment">//一旦被设置为false，不可以更改</span></span><br><span class="line">&#125;)</span><br><span class="line">person.name=<span class="string">'xx'</span></span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">//xxxx ，严格模式下会报错</span></span><br><span class="line"><span class="keyword">delete</span> person.name <span class="comment">//无效 严格模式下会报错</span></span><br></pre></td></tr></table></figure>

<h3 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h3><p><strong>特性</strong>：</p>
<ul>
<li>Configuable 表示能否通过delete删除属性从而重新定义属性，默认是true</li>
<li>enumerable 表示能否通过for-in 循环返回属性，默认是true</li>
<li>get 读取属性时调用函数，默认undefined</li>
<li>set 写入属性时调用函数，默认undefined</li>
</ul>
<p><strong>定义访问器属性</strong>：</p>
<p>使用<code>Object.defineProperty()</code>，定义多个属性使用<code>Object.defineProperties()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">	_age:<span class="number">20</span>, <span class="comment">//下划线写法表示只能通过对象方法访问的属性</span></span><br><span class="line">	state:<span class="string">'young'</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperty(person,<span class="string">'age'</span>,&#123;</span><br><span class="line">	<span class="keyword">get</span>:function()&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">this</span>._age;</span><br><span class="line">	&#125;,</span><br><span class="line">    <span class="keyword">set</span>:function(newVal)&#123;</span><br><span class="line">    	<span class="keyword">if</span>(newVal&gt;<span class="number">50</span>)&#123;</span><br><span class="line">    		<span class="keyword">this</span>._age=newVal;</span><br><span class="line">    		<span class="keyword">this</span>.stae=<span class="string">'old'</span>;</span><br><span class="line">    	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    		<span class="keyword">this</span>._age=newVal;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="读取属性的特性"><a href="#读取属性的特性" class="headerlink" title="读取属性的特性"></a>读取属性的特性</h3><p>使用<code>Object.getOwnPropertyDescriptor()</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person=&#123;&#125;</span><br><span class="line"><span class="built_in">Object</span>.defineProperties(person,&#123;</span><br><span class="line">    _age:&#123;</span><br><span class="line">    	values:<span class="number">20</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    state:&#123;</span><br><span class="line">    	value:<span class="string">'young'</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    age:&#123;</span><br><span class="line">        <span class="keyword">get</span>:function()&#123;</span><br><span class="line">        	<span class="keyword">return</span> <span class="keyword">this</span>._age;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="keyword">set</span>:function(newVal)&#123;</span><br><span class="line">            <span class="keyword">if</span>(newVal&gt;<span class="number">50</span>)&#123;</span><br><span class="line">            	<span class="keyword">this</span>._age=newVal;</span><br><span class="line">            	<span class="keyword">this</span>.stae=<span class="string">'old'</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            	<span class="keyword">this</span>._age=newVal;</span><br><span class="line">            &#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> descriptor=<span class="built_in">Object</span>.getOwnPropertyDescriptor(person,<span class="string">'_age'</span>);</span><br><span class="line">descriptor.value<span class="comment">//20</span></span><br><span class="line">descriptor.configurable<span class="comment">//false</span></span><br><span class="line"><span class="keyword">var</span> descriptor=<span class="built_in">Object</span>.getOwnPropertyDescriptor(person,<span class="string">'age'</span>);</span><br><span class="line">descriptor.value<span class="comment">//undefined</span></span><br><span class="line">descriptor.configurable<span class="comment">//false</span></span><br><span class="line"><span class="keyword">typeof</span> descriptor <span class="comment">//function</span></span><br></pre></td></tr></table></figure>

<h2 id="深拷贝和浅拷贝"><a href="#深拷贝和浅拷贝" class="headerlink" title="深拷贝和浅拷贝"></a>深拷贝和浅拷贝</h2><p><strong>深拷贝</strong>： 是增加了一个指针并且申请了一个新的内存，使这个增加的指针指向这个新的内存 </p>
<p><strong>浅拷贝</strong>： 只是增加了一个指针指向已存在的内存地址 </p>
<p>假设B复制了A，修改A的时候，看B是否发生变化：</p>
<p>如果B跟着<strong>也变了</strong>，说明是浅拷贝，拿人手短！（修改堆内存中的同一个值）</p>
<p>如果B<strong>没有改变</strong>，说明是深拷贝，自食其力！（修改堆内存中的不同的值）</p>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><h3 id="DOM如何创建元素"><a href="#DOM如何创建元素" class="headerlink" title="DOM如何创建元素"></a>DOM如何创建元素</h3><p>创建：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">createHTML(<span class="string">'div'</span>);</span><br></pre></td></tr></table></figure>

<p>添加：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">appendChild(element)</span><br><span class="line">insertBefore(insertdom.chosendom)</span><br></pre></td></tr></table></figure>

<h3 id="DOM获取元素的方式"><a href="#DOM获取元素的方式" class="headerlink" title="DOM获取元素的方式"></a>DOM获取元素的方式</h3><h4 id="根据元素类型获取"><a href="#根据元素类型获取" class="headerlink" title="根据元素类型获取"></a>根据元素类型获取</h4><ul>
<li>document.getElementById();//id名，在实际开发中较少使用，选择器中多用class id一般只用在顶级层存在 不能太过依赖id</li>
<li>document.getElementsByTagName();//标签名</li>
<li>document.getElementsByClassName();//类名</li>
<li>document.getElementsByName();//name属性值，一般不用</li>
<li>document.querySelector();//css选择符模式，返回与该模式匹配的第一个元素，结果为一个元素；如果没找到匹配的元素，则返回null</li>
<li>document.querySelectorAll()//css选择符模式，返回与该模式匹配的所有元素，结果为一个类数组</li>
</ul>
<h4 id="根据关系树来获取"><a href="#根据关系树来获取" class="headerlink" title="根据关系树来获取"></a>根据关系树来获取</h4><ul>
<li>parentNode//获取所选节点的父节点，最顶层的节点为#document</li>
<li>childNodes //获取所选节点的子节点们</li>
<li>firstChild //获取所选节点的第一个子节点</li>
<li>lastChild //获取所选节点的最后一个子节点</li>
<li>nextSibling //获取所选节点的后一个兄弟节点 列表中最后一个节点的nextSibling属性值为null</li>
<li>previousSibling //获取所选节点的前一兄弟节点 列表中第一个节点的previousSibling属性值为null</li>
</ul>
<h4 id="根据元素节点树来选择"><a href="#根据元素节点树来选择" class="headerlink" title="根据元素节点树来选择"></a>根据元素节点树来选择</h4><ul>
<li>parentElement //返回当前元素的父元素节点（IE9以下不兼容）</li>
<li>children // 返回当前元素的元素子节点</li>
<li>firstElementChild //返回的是第一个元素子节点（IE9以下不兼容）</li>
<li>lastElementChild //返回的是最后一个元素子节点（IE9以下不兼容）</li>
<li>nextElementSibling //返回的是后一个兄弟元素节点（IE9以下不兼容）</li>
<li>previousElementSibling //返回的是前一个兄弟元素节点（IE9以下不兼容）</li>
</ul>
<h3 id="节点属性中children和childNodes有什么区别？"><a href="#节点属性中children和childNodes有什么区别？" class="headerlink" title="节点属性中children和childNodes有什么区别？"></a>节点属性中children和childNodes有什么区别？</h3><ul>
<li>childNodes返回的是节点的子节点集合（NodeLists),包括元素节点、文本节点还有属性节点。</li>
<li>children返回的只是节点的元素节点集合（HTMLCollection)</li>
</ul>
<h3 id="HTMLCollection和NodeList的比较"><a href="#HTMLCollection和NodeList的比较" class="headerlink" title="HTMLCollection和NodeList的比较"></a>HTMLCollection和NodeList的比较</h3><p><strong>共同点</strong>：</p>
<ul>
<li><p>都是类数组对象，都有length属性</p>
</li>
<li><p>都有共同的方法：item,可以通过item(index)获取返回结果的元素</p>
</li>
<li><p>都是实时变动的，document上面的更改会反映到相关的对象上</p>
<p><strong>注</strong>：querySeletorAll返回的NodeList是个浅拷贝的类数组对象，在节点数目上是非实时的，不过对节点属性进行修改，还是实时反映的。</p>
</li>
</ul>
<p><strong>区别</strong>：</p>
<ul>
<li>NodeList可以包含任何节点类型，HTMLCollection只包含元素节点。elementNode就是HTML中的标签。</li>
<li>HTMLCollection比NodeList多一个方法：nameitem(),除了可以用id，还可以用name来获取节点信息。</li>
</ul>
<h3 id="获取DOM节点get系列和query系列哪种性能好？"><a href="#获取DOM节点get系列和query系列哪种性能好？" class="headerlink" title="获取DOM节点get系列和query系列哪种性能好？"></a>获取DOM节点get系列和query系列哪种性能好？</h3><p><strong>结论：</strong>get系列的性能都比query系列好，get系列里面各有差异</p>
<p><strong>原因：</strong><code>getElementsByTagName</code>创建的过程不需要做任何操作，只需要返回一个指针即可。而<code>querySelectorAll</code>会循环遍历所有的的结果，然后创建一个新的<code>NodeList</code>。</p>
<h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><h3 id="四种绑定规则"><a href="#四种绑定规则" class="headerlink" title="四种绑定规则"></a>四种绑定规则</h3><ul>
<li><p>默认绑定</p>
<ul>
<li>全局环境，默认绑定到<code>window</code></li>
<li>函数独立调用的时候，<code>this</code>默认绑定到<code>window</code></li>
<li>被嵌套的函数独立调用时，<code>this</code>默认绑定到<code>window</code></li>
<li>立即执行的函数<code>this</code>是<code>window</code></li>
<li>闭包的<code>this</code>默认绑定到<code>window</code></li>
</ul>
</li>
<li><p>隐式绑定</p>
<ul>
<li>被直接对象所包含的函数调用时，也称为方法调用，<code>this</code>隐式绑定到该直接对象</li>
</ul>
</li>
<li><p>显示绑定</p>
<ul>
<li>通过call()、apply()、bind()方法把对象绑定到<code>this</code>上，叫做显式绑定。对于被调用的函数来说，叫做间接调用；多次调用bind()，<code>this</code>永远由第一次<code>bind</code>决定。</li>
</ul>
</li>
<li><p><code>new</code>绑定</p>
<ul>
<li>如果函数或者方法调用之前带有关键字<code>new</code>，就构成构造函数式调用，称为<code>new</code>绑定</li>
</ul>
</li>
<li><p>箭头函数</p>
<ul>
<li>箭头函数是没有<code>this</code>的，箭头函数中的<code>this</code>只取决包裹箭头函数的第一个普通函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a()()());</span><br></pre></td></tr></table></figure>

<p>在上例中，因为包裹箭头函数的第一个普通函数是<code>a</code>，所以此时的<code>this</code>是<code>window</code>。另外箭头函数使用<code>bind</code>这类函数是无效的</p>
</li>
</ul>
<h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><ul>
<li><code>new()</code>绑定 &gt; <code>bind</code>这些函数（显式绑定） &gt; <code>obj.foo()</code>（隐式绑定）&gt; <code>foo()</code>(默认绑定)</li>
<li>箭头函数的<code>this</code>一旦被绑定，就不会再被任何方式改变</li>
</ul>
<h3 id="为什么this绑定的优先级是这样的"><a href="#为什么this绑定的优先级是这样的" class="headerlink" title="为什么this绑定的优先级是这样的"></a>为什么this绑定的优先级是这样的</h3><p>可参考<code>bind</code>绑定this的原理</p>
<h2 id="作用域链、闭包、原型链"><a href="#作用域链、闭包、原型链" class="headerlink" title="作用域链、闭包、原型链"></a>作用域链、闭包、原型链</h2><h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><ul>
<li>定义：<strong>作用域</strong>是指代码的执行环境。代码执行时最先产生的执行环境称为全局作用域，如浏览器为window，node为global。作用域内部执行时产生的、新的作用域为局部作用域。由此逐层产生、逐层嵌套的作用域，称为作用域链</li>
<li>作用：保证执行环境里有权访问的变量和函数是有序的，作用域链的变量只能向上访问，访问到window即被终止，不能向下访问</li>
</ul>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ul>
<li>定义：闭包就是有权访问另一个函数作用域中变量的函数。创建闭包最常见的方式就是在函数内部创建另一个函数，通过另一个函数能够这个函数的局部变量，利用闭包可以突破作用域链</li>
<li>作用：读取函数内部变量，让这些变量一直保存在内存中；封装对象的私有属性和私有方法</li>
<li>优点：避免全局污染</li>
<li>缺点：闭包会常驻内存，增大内存使用量</li>
</ul>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><ul>
<li><p>定义：每个对象都会在其内部初始化一个属性，就是<code>prototype</code>（原型）。当我们访问一个对象的属性时，如果这个对象内部不存在这个属性，那么就会去<code>prototype</code>里找这个属性，这个<code>prototype</code>又有自己的<code>prototype</code>，于是这样一直找下去，知道<code>Object</code>内建对象，就是原型链</p>
</li>
<li><p>特点：<code>instance.contructor.prototype = instance.__proto__</code></p>
</li>
<li><p><strong>怎么判断一个属性是对象上的属性还是其原型对象上的属性</strong>：使用<code>hasOwnProperty()</code>返回<code>true</code>，说明是这个对象上的；如果返回<code>false</code>，但是属性<code>in</code>这个对象返回了<code>true</code>，说明是原型对象上的属性。如果都是<code>false</code>，不存在这个属性。</p>
</li>
</ul>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><h3 id="继承的原理"><a href="#继承的原理" class="headerlink" title="继承的原理"></a>继承的原理</h3><p>每个函数都有个原型对象，这个对象用来存储通过这个函数所创建的所有实例的共有属性和方法。在读取某个对象属性的时候，从实例开始，如果实例有就返回，如果没有就找原型对象，找到了就返回。通过实例只能访问原型对象里的值，但是不能修改。这就实现了继承。</p>
<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = value;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.getValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>,value)</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> Child(<span class="number">1</span>);</span><br><span class="line">child.getValue();      <span class="comment">// 1</span></span><br><span class="line">child <span class="keyword">instanceof</span> Parent;    <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>以上继承方式的核心是在<strong>子类的构造函数中<code>Parent.call(this, value)</code>继承父类属性，然后</strong>改变子类的原型为<code>new Parent()</code>来继承父类函数。</p>
<p>这种继承方式优点在于构造函数可以传参，不会与父类引用属性共享，可以复用父类的函数，但是也存在一个缺点就是在继承父类函数的时候调用了父类构造函数，导致子类的原型上多了不需要的父类属性，存在内存上的浪费</p>
<h3 id="寄生组合继承"><a href="#寄生组合继承" class="headerlink" title="寄生组合继承"></a>寄生组合继承</h3><p>这种继承方式对组合继承进行了优化，组合继承的缺点在于继承父类函数时调用了构造函数，只要优化掉这点就行了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.val = value;</span><br><span class="line">&#125;</span><br><span class="line">Parent.prototype.getValue = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line">    Parent.call(<span class="keyword">this</span>, value);</span><br><span class="line">&#125;</span><br><span class="line">Child.prototype = <span class="built_in">Object</span>.create(Parent.prototype, &#123;</span><br><span class="line">    <span class="keyword">constructor</span>:&#123;</span><br><span class="line">        value: child,</span><br><span class="line">        enumerable: fasle,</span><br><span class="line">        writeable: <span class="literal">true</span>,</span><br><span class="line">        configurable: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">const</span> child = <span class="keyword">new</span> child(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">child.getValue() <span class="comment">// 1</span></span><br><span class="line">child <span class="keyword">instanceof</span> Parent <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>以上继承实现的核心就是将父类的原型赋值给了子类，并且将构造函数设置为子类，这样既解决了无用的父类属性问题，还能正确的找到子类的构造函数</p>
<h3 id="class继承"><a href="#class继承" class="headerlink" title="class继承"></a>class继承</h3><p>在<code>ES6</code>中，可以使用<code>class</code>去实现继承</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span>&#123;</span><br><span class="line">	<span class="keyword">constructor</span>(value)&#123;</span><br><span class="line">		<span class="keyword">this</span>.val = value;</span><br><span class="line">	&#125;</span><br><span class="line">	getValue()&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(<span class="keyword">this</span>.val);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><h3 id="事件循环（EventLoop"><a href="#事件循环（EventLoop" class="headerlink" title="事件循环（EventLoop)"></a>事件循环（EventLoop)</h3><p>浏览器执行是有一个执行栈的，当遇到异步的代码时，异步代码会被挂起并在需要执行的时候加入到Task队列里面，一旦执行栈为空，EventLoop会从Task队列里拿出需要执行的代码放入执行栈中执行。执行完毕后就会弹出。</p>
<p>但是不同的任务源会被分到微任务（micro-task）和宏任务（macro-task）里面</p>
<p>宏任务：<code>script</code>，<code>setTimeout</code>，<code>setInterval</code>，<code>I/O</code>，<code>UI rendering</code></p>
<p>微任务：<code>process.nextTick</code>，<code>Promise</code>，<code>Object.observe</code>，<code>MutatuibObserver</code></p>
<p><strong><em>执行顺序</em></strong></p>
<ol>
<li>首先执行同步代码，属于宏任务</li>
<li>执行完所有宏任务之后，查询有没有异步代码需要执行，然后执行微任务</li>
<li>执行微任务之后，如果有必要会重新渲染页面</li>
<li>然后一下轮执行宏任务中异步代码，比如说setTimeout的回调函数。</li>
</ol>
<p><strong>Promise定义之后便会执行，Promise的<code>then</code>为异步里面的微任务且优先级高于<code>setTimeout</code></strong></p>
<h3 id="事件模型"><a href="#事件模型" class="headerlink" title="事件模型"></a>事件模型</h3><ul>
<li>冒泡型事件：当你使用事件冒泡时，子级元素先触发，父级元素后触发</li>
<li>捕获型事件：当你使用事件捕获时，父级元素先触发，子级元素后触发</li>
<li>DOM 事件流：同时支持两种事件模型：捕获型事件和冒泡型事件</li>
<li>阻止冒泡：在W3c 中，使用<code>stopPropagation()</code> 方法；在IE下设置<code>cancelBubble = true</code></li>
<li>阻止捕获：阻止事件的默认行为，例如click - <a> 后的跳转。在W3c 中，使用<code>preventDefault()</code>方法，在IE 下设置<code>window.event.returnValue = false</code></li>
</ul>
<h3 id="addEventListener三个参数"><a href="#addEventListener三个参数" class="headerlink" title="addEventListener三个参数"></a>addEventListener三个参数</h3><p>第一个参数是事件类型，第二个是事件发生的回调函数，第三个是个布尔值，默认是false，false是冒泡阶段执行，true是捕获阶段。</p>
<h3 id="事件代理"><a href="#事件代理" class="headerlink" title="事件代理"></a>事件代理</h3><p>事件代理（ Event Delegation ），又称之为事件委托。是把原本需要绑定的事件委托给父元素，让父元素担当事件监听的职务。事件代理的原理是DOM元素的事件冒泡。</p>
<p>使用事件代理的好处:</p>
<ul>
<li>可以提高性能可以大量节省内存占用，减少事件注册，比如在table 上代理所有td 的click 事件就非常棒</li>
<li>可以实现当新增子对象时无需再次对其绑定</li>
</ul>
<h2 id="ES6"><a href="#ES6" class="headerlink" title="ES6"></a>ES6</h2><h3 id="let-const-及-var的区别"><a href="#let-const-及-var的区别" class="headerlink" title="let const 及 var的区别"></a>let const 及 var的区别</h3><p><strong>let</strong></p>
<ul>
<li><p>作用域是块级作用域（之前只有函数作用域和全局作用域）</p>
</li>
<li><p>不存在变量声明提前（在<code>let</code>之前使用会报错，<code>is not defined</code>）</p>
</li>
<li><p>不可以重复定义（<code>var</code>可以，不会报错；<code>let</code>会报错<code>has already been declared</code>）</p>
</li>
<li><p>存在暂时性死区</p>
<ul>
<li><p><strong>理解</strong>：在一个块级作用域中，变量唯一存在，一旦声明了一个，就属于这个块级作用域，不受外部影响</p>
</li>
<li><p><strong>本质</strong>：只要已经入当前作用域，所要用的变量就已经存在了，但是不可以获取，等到变量声明后才可以使用</p>
</li>
<li><p><strong>意义</strong>：标准化代码，将所有的变量声明放在最前面</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a);</span><br><span class="line">    <span class="keyword">let</span> a=<span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cannot access 'a' before initialization</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
</li>
</ul>
<p><strong>const</strong></p>
<ul>
<li>一般用来声明常量，不允许修改</li>
<li>只读属性，声明同时要赋值</li>
<li>和<code>let</code>一样，都是块级作用域，存在暂时性死区，没有变量声明提前，不允许重复定义</li>
</ul>
<p><strong>var</strong></p>
<ul>
<li>作用域是函数作用域，在一个函数内部用<code>var</code>声明一个变量，则这个变量只在函数内有效</li>
<li>存在变量声明提前（但是赋值没有提前，提前访问会返回<code>undefined</code>）</li>
</ul>
<p><strong>如果在函数内引用的变量是let定义的局部变量，就会形成闭包。如果函数内引用的是<code>var</code>定义的全局变量，就不会形成闭包</strong></p>
<h3 id="为什么需要块级作用域"><a href="#为什么需要块级作用域" class="headerlink" title="为什么需要块级作用域"></a>为什么需要块级作用域</h3><p><code>ES5</code>只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景</p>
<ul>
<li><p>内层变量可能会覆盖外层变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(tmp);</span><br><span class="line">    <span class="keyword">if</span>(<span class="literal">false</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> tmp = <span class="string">'hello world'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">f();   <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>

<p>上面代码的原意是，<code>if</code>代码块的外部使用外层的<code>tmp</code>变量，内部使用外层的<code>tmp</code>变量，内部使用内层的<code>tmp</code>变量。但是，函数<code>f</code>执行后，输出结果为<code>undefined</code>，原因在于变量提升，导致内层的<code>tmp</code>变量覆盖了外层的<code>tmp</code>变量</p>
</li>
<li><p>用来计数的循环变量泄露为全局变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">'hello'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; s.length; i++)&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(s[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cnosole.log(i); <span class="comment">//5</span></span><br></pre></td></tr></table></figure>

<p>上面代码中变量<code>i</code>只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量</p>
</li>
</ul>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p><code>Promise</code>是异步问题的解决方案，简单说是个容器，里面存的是某个未来会结束的结果。</p>
<ul>
<li>特点    <ul>
<li>对象的状态不受外界影响。<code>Promise</code>对象代表一个异步操作，有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）、<code>rejected</code>（已失败）。只有异步操作的结果可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。</li>
<li>一旦状态改变，就不会再变，任何时候都可以得到这个结果。<code>Promise</code>对象的状态改变只有两种可能：从<code>pending</code>变为<code>fulfilled</code>和从<code>pending</code>变为<code>rejected</code>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就被称为<code>resolved</code>（已定型）。如果改变已经发生，再对<code>promise</code>对象添加回调函数也会立即得到这个结果。而<code>event</code>的特点是如果你错过了再去监听是得不到结果的。</li>
</ul>
</li>
<li>优点<ul>
<li>将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。</li>
<li><code>Promise</code>对象提供统一的接口，使得异步操作更加容易</li>
</ul>
</li>
<li>缺点<ul>
<li>无法取消<code>Promise</code>，一旦新建它就会立即执行，无法中途取消</li>
<li>如果不设置回调函数，<code>Promise</code>内部抛出的错误，不会反映到外部</li>
<li>当处于<code>pending</code>状态时，无法得知目前进展到哪一阶段</li>
</ul>
</li>
<li>基本用法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//some code</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="comment">/*异步操作能成功*/</span>)&#123;</span><br><span class="line">    	resolve(value);   </span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    	reject(error);                        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p><code>Promise</code>构造函数接受一个函数作为参数，该函数的两个参数分别是<code>resolve</code>和<code>reject</code>。它们是两个函数，由<code>javascript</code>引擎提供，不用自己部署。</p>
<p><code>resolve</code>函数的作用是将<code>Promise</code>对象的状态从”未完成”变为”成功”（即从<code>pending</code>变为<code>resolved</code>），在异步操作成功时调用，并将异步操作的结果变为参数传出去；<code>rejected</code>函数的作用是，将<code>Promise</code>对象的状态从”未完成”变成”失败”（即从<code>pending</code>变为<code>rejected</code>），在异步操作时调用，并将异步操作报出的错误作为参数传出去</p>
<ul>
<li><p><code>then</code>方法–<code>Promise.prototype.then()</code></p>
<p>作用：为<code>Promise</code>实例添加状态改变时的回调函数（可以采用链式写法，即<code>then</code>方法后面再调用另一个<code>then</code>方法）。<code>then</code>方法的第一个参数是<code>resolved</code>状态的回调函数，第二个参数（可选）是<code>rejected</code>状态的回调函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">getJSON(<span class="string">"/posts.json"</span>).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span><br><span class="line">	<span class="keyword">return</span> json.post;</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">post</span>)</span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上面代码中使用的<code>then</code>方法，依次指定了两个回调函数。第一个回调函数完成以后，会将<strong><em>返回结果</em></strong>作为参数传入第二个回调函数。若前一个回调函数返回的是一个<code>Promise</code>对象（即有异步操作）</p>
</li>
<li><p><code>catch</code>方法–<code>Promise.prototype.catch()</code></p>
<p><code>Promise.prototype.catch</code>方法是<code>.then(null, rejection)</code>或<code>.then(undefined, rejection)</code>的别名，用于指定发生错误时的回调函数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">p.then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'fulfilled:'</span>, val))</span><br><span class="line"> .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'rejected:'</span>, err));</span><br><span class="line"></span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">p.then(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'fulfilled:'</span>,val));</span><br><span class="line"> .then(<span class="literal">null</span>, (err) =&gt; <span class="built_in">console</span>.log(<span class="string">'rejected:'</span>, err))</span><br></pre></td></tr></table></figure>

<p>如果异步操作跑出错误，状态就会变为<code>rejected</code>，就会调用<code>catch</code>方法指定的回调函数处理这个错误。另外<code>then</code>方法指定的回调函数如果运行中抛出错误，也会被<code>catch</code>方法捕获</p>
<p>由于<code>catch</code>是<code>then</code>方法的别名，所以<code>catch</code>也可以链式调用</p>
</li>
<li><p><code>finally</code>方法–<code>Promise.prototype.finally()</code></p>
<p><code>finally</code>方法用于指定不管<code>Promise</code>对象的最后状态如何，都会执行的操作。本质上是<code>then</code>方法的特例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">promise.finally(( =&gt; &#123;</span><br><span class="line">	<span class="comment">// 语句                 </span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">promise.then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 语句</span></span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;, error =&gt; &#123;</span><br><span class="line">    <span class="comment">// 语句</span></span><br><span class="line">    <span class="keyword">throw</span> error;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Promise.all()</code></p>
<p><code>Promise.all()</code>方法用于将多个<code>Promise</code>实例，包装成一个新的<code>Promise</code>实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.all([p1, p2, p3]);</span><br></pre></td></tr></table></figure>

<p><code>Promise.all()</code>方法接受一个数组作为参数，<code>p1</code>、<code>p2</code>、<code>p3</code>都是<code>Promise</code>实例，如果不是就会先调用<code>Promise.resolve</code>方法，将参数转换为<code>Promise</code>实例，再进一步处理。<code>Promise.all</code>方法的参数可以不是数组，但必须具有<code>Iterator</code>接口，且返回的每个成员都是<code>Promise</code>实例</p>
<p><code>p</code>的状态由<code>p1</code>、<code>p2</code>、<code>p3</code>决定，分为两种情况</p>
<ol>
<li>有<code>p1</code>、<code>p2</code>、<code>p3</code>的状态都变成<code>fulfilled</code>，<code>p</code>的状态才会变成<code>fulfilled</code>，此时<code>p1</code>、<code>p2</code>、<code>p3</code>的返回值组成一个数组，传递给<code>p</code>的回调函数</li>
<li>只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个被<code>rejected</code>，<code>p</code>的状态就变成<code>rejected</code>，此时第一个被<code>reject</code>的实例的返回值，会传递给<code>p</code>的回调函数</li>
</ol>
</li>
<li><p><code>Promise.race()</code></p>
<p><code>Promise.race()</code>同样是将多个<code>Promise</code>实例包装成一个新的<code>Promise</code>实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="built_in">Promise</span>.race([p1, p2, p3])</span><br></pre></td></tr></table></figure>

<p>上面代码中，只要<code>p1</code>、<code>p2</code>、<code>p3</code>之中有一个率先改变状态，<code>p</code>的状态就跟着改变。那个率先改变的<code>Promise</code>实例的返回值，就传给<code>p</code>的回调函数。其中<code>Promise.race</code>的参数如果不是<code>Promise</code>实例就会调用<code>Promise.reslove</code>方法</p>
</li>
</ul>
<h3 id="Proxy"><a href="#Proxy" class="headerlink" title="Proxy"></a>Proxy</h3><ul>
<li><p>概述：用于修改某些操作的默认行为，等同于在语言层面做出修改，所以属于一种”元编程”（<code>meta programming</code>），即对编程语言进行编程。<code>Proxy</code>可以理解成，在目标对象之前架设一层”拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">	<span class="keyword">get</span>: function(target, propKey, receiver)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`getting <span class="subst">$&#123;propKey&#125;</span>!`</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.get(target, propKey, receiver);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="keyword">set</span>: function(target, propKey, receiver)&#123;</span><br><span class="line">    	<span class="built_in">console</span>.log(<span class="string">`setting <span class="subst">$&#123;propKey&#125;</span>!`</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">Reflect</span>.set(target, propKey, receiver);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">obj.count = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// setting count!</span></span><br><span class="line">++obj.count;</span><br><span class="line"><span class="comment">// getting count!</span></span><br><span class="line"><span class="comment">// setting count!</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure>

<p>上面代码对一个空对象架设了一层拦截，重定义了属性的读取（<code>get</code>）和设置（<code>set</code>）行为。对设置了拦截行为的对象<code>obj</code>，去读写它的属性就会得到上面代码的结果。</p>
</li>
<li><p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br></pre></td></tr></table></figure>

<p><code>new Proxy()</code>表示生成一个<code>Proxy</code>实例，<code>target</code>参数表示所要拦截的目标对象，<code>handler</code>参数也是一个对象，用来定制拦截行为。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">	<span class="keyword">get</span>: function(target, propKey)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">35</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">proxy.time <span class="comment">//35</span></span><br><span class="line">proxy.name <span class="comment">//35</span></span><br><span class="line">proxy.title <span class="comment">//35</span></span><br></pre></td></tr></table></figure>

<p><strong>注意</strong>：要使得<code>Proxy</code>起作用，必须针对<code>Proxy</code>实例（上例是<code>Proxy</code>对象）进行操作，而不是针对目标对象（上例是空对象）进行操作。由于拦截函数总是返回35，所以访问任何属性都得到35。<strong>如果<code>handler</code>没有设置任何拦截，那就等同于直接通向原对象</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> target = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> handler = &#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> proxy = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</span><br><span class="line">proxy.a = <span class="string">'b'</span>;</span><br><span class="line">target.a  <span class="comment">// "b"</span></span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>handler</code>是一个空对象，没有任何拦截效果，访问<code>proxy</code>就等同于访问<code>target</code></p>
</li>
<li><p><code>Proxy</code>支持的拦截操作，一共13种</p>
<ul>
<li><code>get(target, propKey, receiver)</code>：拦截对象属性的获取，比如<code>proxy.foo</code>和<code>proxy[&#39;foo&#39;]</code></li>
<li><code>set(target, propKey, value, receiver)</code>：拦截对象属性的设置，比如<code>proxy.foo = v</code>或<code>proxy[&#39;foo&#39;] = v</code>，返回一个布尔值</li>
<li><code>has(target, propKey)</code>：拦截<code>propKey in proxy</code>操作，返回一个布尔值</li>
<li><code>deleteProperty(target, propKey)</code>：拦截<code>delete prop[propKey]</code>操作，返回一个布尔值</li>
<li><code>ownKeys(target)</code>：拦截<code>Object.getOenPropertyNames(proxy)</code>、<code>Object.getOwnPropertySymbols(proxy)</code>、<code>Object.keys(proxy)</code>、<code>for...in</code>循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而<code>Object.keys()</code>的返回结果仅包括目标对象自身的可遍历属性</li>
<li><code>getOwnPropertyDescriptor(target, propKey)</code>：拦截<code>Object.getOwnPropertyDescriptor(proxy, propKey)</code>，返回属性的描述对象</li>
<li><code>defineProperty(target, propKey, propDesc)</code>：拦截<code>Object.defineProperty(target, propKey, propDesc)</code>、<code>Object.defineProperties(target, propDescs)</code>，返回一个布尔值</li>
<li><code>preventExtensions(target)</code>：拦截<code>object.preventExtensions(proxy)</code>返回一个布尔值</li>
<li><code>getProptotypeOf(target)</code>：拦截<code>Object.getPrototypeOf(proxy)</code>，返回一个对象</li>
<li><code>isExtensible(target)</code>：拦截<code>Object.isExtensible(proxy)</code>，返回一个布尔值</li>
<li><code>setPeototypeOf(target, proto)</code>：拦截<code>Object.setPrototypeOf(proxy, proto)</code>，返回一个布尔值。</li>
<li><code>apply(target, object, proto)</code>：拦截<code>Proxy</code>实例作为函数调用的操作，比如<code>proxy(...args)</code>、<code>proxy.call(object, ...args)</code>、<code>proxy.apply(...)</code></li>
<li><code>construct(target, args)</code>：拦截<code>proxy</code>实例作为构造函数调用的操作，比如<code>new proxy(...args)</code></li>
</ul>
</li>
</ul>
<h3 id="Reflect"><a href="#Reflect" class="headerlink" title="Reflect"></a>Reflect</h3><p><code>Reflect</code>对象与<code>Proxy</code>对象一样也是<code>ES6</code>为了操作对象而提供地新<code>API</code>。<code>Reflect</code>对象设计的目的有这样几个</p>
<ul>
<li><p>设计目的</p>
<ul>
<li><p>将<code>Object</code>对象的一些明显属于语言内部的方法（比如<code>Object.defineProperty</code>)，放到<code>Reflect</code>对象上。现阶段，某些方法同时在<code>Object</code>和<code>Reflect</code>对象上部署，未来的新方法将只部署在<code>Reflect</code>对象上。</p>
</li>
<li><p>修改某些<code>Object</code>方法方法返回的结果，让其变得合理。比如，<code>Object.defineProperty(obj, name, desc)</code>在无法定义属性时，会抛出一个错误，而<code>Reflect.defineProperty(obj, name, desc)</code>则会返回<code>false</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//老写法</span></span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	<span class="built_in">Object</span>.defineProperty(target, property, attributes);</span><br><span class="line">	<span class="comment">// success</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">	<span class="comment">// failure</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新写法</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Reflect</span>.defineProperty(target, property, attributes))&#123;</span><br><span class="line">    <span class="comment">// success</span></span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="comment">//failure</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>让<code>Object</code>属性都变成函数行为。某些<code>Object</code>操作是命令式，比如<code>name in obj</code>的<code>delete obj[name]</code>，而<code>Reflect.has(obj, name)</code>和<code>Reflect.deleteProperty(obj, name)</code>让它们变成了函数行为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 老写法</span></span><br><span class="line"><span class="string">'assign'</span> <span class="keyword">in</span> <span class="built_in">Object</span>  <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//新写法</span></span><br><span class="line"><span class="built_in">Reflect</span>.has(<span class="built_in">Object</span>, <span class="string">'assign'</span>)   <span class="comment">//true</span></span><br></pre></td></tr></table></figure>
</li>
<li><p><code>Reflect</code>对象的方法与<code>Proxy</code>对象的方法意义对应，只要是<code>Proxy</code>对象的方法就能在<code>Reflect</code>对象上找到对应的方法。这就让<code>Proxy</code>对象可以方便地调用对应的<code>Reflect</code>方法，完成默认行为，作为修改行为的基础。也就是说，不管怎么修改默认行为，总可以在<code>Reflect</code>上获取默认行为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Proxy</span>(target, &#123;</span><br><span class="line">    <span class="keyword">set</span>: function(target, name, value, receiver)&#123;</span><br><span class="line">    	<span class="keyword">var</span> success = <span class="built_in">Reflect</span>.set(target, name, value, receiver);</span><br><span class="line">        <span class="keyword">if</span>(success)&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'property '</span> + name + <span class="string">' on '</span> + target + <span class="string">' set to '</span> + value);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> success;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>上面代码中，<code>Proxy</code>方法拦截<code>target</code>对象的属性赋值行为。它采用了<code>Reflect.set</code>方法将值赋给对象的属性，确保完成原有的行为，然后再部署额外的功能</p>
</li>
</ul>
</li>
<li><p>静态方法，一共有13个</p>
<ul>
<li><code>Reflect.apply(target, thisArg, args)</code></li>
<li><code>Reflec.construct(target, args)</code></li>
<li><code>Reflect.get(target, name, receiver)</code></li>
<li><code>Reflect.set(target, name, value, receiver)</code></li>
<li><code>Reflect.defineProperty(target, name, desc)</code></li>
<li><code>Reflect.deleteProperty(target, name)</code></li>
<li><code>Reflect.has(target, name)</code></li>
<li><code>Reflect.ownKeys(target)</code></li>
<li><code>Reflect.isExtensions(target)</code></li>
<li><code>Reflect.preventExtensions(target)</code></li>
<li><code>Reflect.getOwnPropertyDescriptor(target, name)</code></li>
<li><code>Reflect.getPrototypeOf(target)</code></li>
<li><code>Reflect.setPrototypeOf(target, prototype)</code></li>
</ul>
</li>
</ul>
<h3 id="Generator-yield"><a href="#Generator-yield" class="headerlink" title="Generator + yield"></a><code>Generator + yield</code></h3><p>是<code>ES6</code>里面新的数据类型，像一个函数可以返回多次。特点是函数有个*号</p>
<p>调用的话就是不断调用<code>next()</code>，返回当前的<code>value</code>值和<code>done</code>的状态</p>
<p><code>return</code>直接忽略所有的<code>yield</code>，返回最终结果</p>
<p>可以随心所欲的交出和恢复函数的执行权</p>
<h3 id="await和async"><a href="#await和async" class="headerlink" title="await和async"></a>await和async</h3><p><code>async</code>函数就是将<code>Generator</code>函数的星号（*）替换成<code>async</code>，将<code>yield</code>替换成<code>await</code></p>
<p><code>async</code>函数对<code>Generator</code>函数的改进，体现在以下四点</p>
<ul>
<li>内置执行器：<code>async</code>函数的执行和函数一模一样</li>
<li>更好的语义：<code>async</code>表示函数里有异步操作，<code>await</code>表示紧跟在函数后面的表达式需要等待结果</li>
<li>更广的适用性：<code>yield</code>命令后面只能是<code>Thunk</code>函数或<code>Promise</code>对象，而<code>async</code>函数的<code>await</code>命令后面，可以是<code>Promise</code>对象和原始类型的值（数值、字符串和布尔值，但这时会自动转成<code>resolve</code>的<code>Promise</code>对象）</li>
<li>返回值是<code>Promise</code>：<code>async</code>函数的返回值是<code>Promise</code>对象，可以用<code>then</code>方法指定下一步的操作</li>
</ul>
<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><p><a href="'https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions'">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions</a></p>
<h2 id="JS模块化"><a href="#JS模块化" class="headerlink" title="JS模块化"></a>JS模块化</h2><h3 id="什么是模块化"><a href="#什么是模块化" class="headerlink" title="什么是模块化"></a>什么是模块化</h3><p>模块化是一种规范，一种约束，这种约束会大大提升开发效率。将每个js文件看作是一个模块，每个模块通过固定的方式引入，并且通过固定的方式向外暴露指定的内容</p>
<h3 id="模块化用来解决什么问题"><a href="#模块化用来解决什么问题" class="headerlink" title="模块化用来解决什么问题"></a>模块化用来解决什么问题</h3><ul>
<li>全局变量污染：各个文件的变量都是挂载到window对象上，污染全局变量</li>
<li>变量重名：不同文件中的变量如果重名，后面的会覆盖前面的，造成程序运行错误</li>
<li>文件依赖顺序：多个文件存在依赖关系，需要保证一定的加载顺序</li>
</ul>
<h3 id="Module模式"><a href="#Module模式" class="headerlink" title="Module模式"></a>Module模式</h3><p>在模块化规范形成之前，JS开发者使用Module设计模式来解决JS全局作用域的污染问题。Module模式最初被定义为一种在传统软件工程中为类提供私有和公有封装的方法。在Javascript中，Module模式使用<code>匿名函数自调用（闭包）</code>来封装，通过自定义暴露行为来区分私有成员和公有成员</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> myModule = (<span class="function"><span class="keyword">function</span>(<span class="params">window</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> moduleName = <span class="string">'module'</span>;   <span class="comment">//private</span></span><br><span class="line">    <span class="comment">//public</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setModuleName</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">        moduleName = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//public</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getModuleName</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> moduleName;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;setModuleName, getModuleName&#125;;</span><br><span class="line">&#125;)(<span class="built_in">window</span>)</span><br></pre></td></tr></table></figure>

<p>上面例子是Module模式的一种写法，它通过闭包的特性打开了一个新的作用域，它通过<strong><em>闭包</em></strong>的特性打开了一个新的作用域，缓解了全局作用域命名冲突的安全性的问题。但是，开发者并不能够用它来组织和拆分代码，于是乎便出现了以此为基石的模块化规范</p>
<h3 id="CommonJS"><a href="#CommonJS" class="headerlink" title="CommonJS"></a>CommonJS</h3><p>CommonJS主要用在Node开发上。每个文件就是一个模块，每个文件都有自己的一个作用域，通过<code>module.exports</code>暴露public成员，输出一个值的拷贝，输出之后不能改变，会缓存起来。所有的文件加载都是同步完成</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件名：x.js</span></span><br><span class="line"><span class="keyword">let</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    x += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">module</span>.exports.x = x;</span><br><span class="line"><span class="built_in">module</span>.exports.add = add;</span><br></pre></td></tr></table></figure>

<p>CommonJS通过<code>require()</code>引入模块依赖，require函数可以引入Node内置模块、自定义模块和npm第三方模块</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 文件名main.js</span></span><br><span class="line"><span class="keyword">let</span> xm = <span class="built_in">require</span>(<span class="string">'./x.js'</span>);</span><br><span class="line"><span class="built_in">console</span>.log(xm.x);      <span class="comment">//1</span></span><br><span class="line"><span class="built_in">console</span>.log(xm.add());  <span class="comment">//2</span></span><br><span class="line"><span class="built_in">console</span>.log(xm.x);      <span class="comment">//1，不是输出3，x只是一个值的拷贝</span></span><br></pre></td></tr></table></figure>

<p>由于使用了Node的API，只能在服务端环境上运行</p>
<h3 id="AMD"><a href="#AMD" class="headerlink" title="AMD"></a>AMD</h3><p>一个单独文件一个模块，主要运行于浏览器端，模块和模块的依赖可以被异步加载。</p>
<ol>
<li>定义模块</li>
</ol>
<p>AMD规范只定义了一个函数define，它是全局变量，使用<code>return</code>规范对外接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define(id?, dependencies, factory);</span><br></pre></td></tr></table></figure>

<p><code>id</code>：是定义中模块的名字，这个参数是可选的，如果没有提供该参数，模块的名字应该默认为模块加载器请求的指定脚本的名字，如果提供了该参数，模块名必须是”顶级”和绝对的</p>
<p><code>dependencies</code>：是定义的模块中所依赖的模块数组，依赖模块必须根据模块的工厂方法优先执行，并且执行的结果应该按照数组中位置顺序以参数的形式传入（定义中模块的）工厂方法中</p>
<p><code>factory</code>：是模块初始化要执行的函数或对象，如果为函数，它应该只被执行一次；如果是对象，此对象应该为模块的输出值</p>
<ol start="2">
<li>加载模块</li>
</ol>
<p>require.js中采用require()语句加载模块，使用require进行模块的加载</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">require</span>([<span class="built_in">module</span>], callback);</span><br></pre></td></tr></table></figure>

<p><code>[module]</code>：是一个数组，里面的成员就是要加载的模块</p>
<p><code>callback</code>：加载成功后的回调函数</p>
<ol start="3">
<li>requirejs使用例子</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义一个math模块，返回一个add方法</span></span><br><span class="line">define(<span class="string">'math'</span>, [<span class="string">'jquery'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$</span>))</span>&#123; <span class="comment">//引入jquery模块</span></span><br><span class="line">	<span class="keyword">return</span>&#123;</span><br><span class="line">    	add: <span class="function"><span class="keyword">function</span>(<span class="params">x, y</span>)</span>&#123;</span><br><span class="line">    		<span class="keyword">return</span> x + y;</span><br><span class="line">		&#125;   </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过require加载math模块，使用math模块的add方法</span></span><br><span class="line"><span class="built_in">require</span>([<span class="string">'jquery'</span>, <span class="string">'math'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">$, math</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(math.add(<span class="number">10</span>, <span class="number">100</span>));     <span class="comment">// 100</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="CMD"><a href="#CMD" class="headerlink" title="CMD"></a>CMD</h3><p>一个文件一个模块。主要在浏览器中运行，define全局函数，定义模块，通过exports向外提供接口，用require获取接口，使用某个组件时用use()调用。通过require引入的模块，只有当程序运行到这里时候才会加载执行。</p>
<ol>
<li>定义模块</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define(factory);</span><br></pre></td></tr></table></figure>

<p>define接受factory参数，factory可以是一个函数，也可以是一个对象或字符串</p>
<ul>
<li>factory为对象、字符串时：表示模块的接口就是该对象、字符串</li>
<li>factory为函数时：表示模块的构造方法，执行该方法可以得到模块向外提供的接口，factory方法在执行时，默认会传入三个参数：<code>require</code>、<code>exports</code>、<code>module</code>。其中<code>require</code>用来加载模块，<code>exports</code>实现向外提供接口</li>
</ul>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// factory为对象</span></span><br><span class="line">define(&#123;<span class="string">"foo"</span>: <span class="string">"bar"</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// factory为字符串</span></span><br><span class="line">define(<span class="string">'I am a template. My name is &#123;&#123;name&#125;&#125;.'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// factory为函数</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</span><br><span class="line">    <span class="comment">//对外提供 foo 属性</span></span><br><span class="line">    exports.foo = <span class="string">'bar'</span>;</span><br><span class="line">    <span class="comment">//对外提供 doSomething 方法</span></span><br><span class="line">    exports.doSomething = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>加载模块</li>
</ol>
<p>当factory为函数时，require会作为默认参数传递进去，而require可以实现模块的加载</p>
<p>require是一个方法，接受模块标识作为唯一参数，用来获取其他模块提供的接口</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// 获取模块 a 的接口</span></span><br><span class="line">  <span class="keyword">var</span> a = <span class="built_in">require</span>(<span class="string">'./a'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 调用模块 a 的方法</span></span><br><span class="line">  a.doSomething();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>seajs使用例子</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//定义模块  myModule.js</span></span><br><span class="line">define(<span class="function"><span class="keyword">function</span>(<span class="params">require, exports, module</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> $ = <span class="built_in">require</span>(<span class="string">'jquery.js'</span>);</span><br><span class="line">    $(<span class="string">'div'</span>).addClass(<span class="string">'active'</span>);</span><br><span class="line">    exports.data = <span class="number">1</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//加载模块</span></span><br><span class="line">seajs.use([<span class="string">'myModule.js'</span>], <span class="function"><span class="keyword">function</span>(<span class="params">my</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> star = my.data;</span><br><span class="line">    <span class="built_in">console</span>.log(star);   <span class="comment">// 1</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="ES6模块化"><a href="#ES6模块化" class="headerlink" title="ES6模块化"></a>ES6模块化</h3><p>ES6模块功能主要由两个命令构成： <code>import</code> 和<code>export</code> 。<code>import</code> 命令用于输入其他模块提供的功能。<code>export</code> 命令用于规范模块的对外接口。</p>
<ol>
<li>export</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导出变量 profile.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> lastName = <span class="string">'Jackson'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">var</span> year = <span class="number">1998</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出函数 circle.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">area</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Math</span>.PI * radius * radius;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">circumference</span>(<span class="params">radius</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">2</span> * <span class="built_in">Math</span>.PI * radius;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>import</li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;firstName, lastName, year&#125; form <span class="string">'./profile.js'</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setName</span>(<span class="params">element</span>)</span>&#123;</span><br><span class="line">    element.textContent = firstName + <span class="string">' '</span> + lastName;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> circle form <span class="string">'./circle.js'</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'面积：'</span> + circle.area(<span class="number">4</span>));</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'周长：'</span> + circle.circumference(<span class="number">14</span>))</span><br></pre></td></tr></table></figure>



<h1 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h1><h2 id="基础-3"><a href="#基础-3" class="headerlink" title="基础"></a>基础</h2><h3 id="网络分层体系"><a href="#网络分层体系" class="headerlink" title="网络分层体系"></a>网络分层体系</h3><p><img src="https://201907.oss-cn-shanghai.aliyuncs.com/cs/5606289-263144780e3e6af6f1d3fcd145904919.png" alt="img"></p>
<p>发送端从应用层→物理层 打包发送</p>
<p>接收端从物理层→应用层 解析获取</p>
<h3 id="路由器工作在哪一层"><a href="#路由器工作在哪一层" class="headerlink" title="路由器工作在哪一层"></a>路由器工作在哪一层</h3><ul>
<li><p>网络层</p>
<p>路由器是连接因特网中各局域网、广域网的设备，会根据信道的情况自动选择和设定路由，以最佳路径，按先后顺序发送信号</p>
</li>
<li><p>路由器和交换机最主要的区别就是<strong>交换机发生在OSI参考模型的第二层（数据链路层）</strong>，而<strong>路由器发生在第三层（网络层）</strong></p>
</li>
</ul>
<h3 id="DNS解析方式"><a href="#DNS解析方式" class="headerlink" title="DNS解析方式"></a><code>DNS</code>解析方式</h3><p>以输入<a href="www.google.com">www.google.com</a>为例</p>
<ol>
<li>浏览器检查自身缓存，有无解析此域名对应的<code>ip</code></li>
<li>操作系统缓存文件中查询</li>
<li>请求本地域名服务器(<code>LDNS</code>)解析域名（一般在城市某处，不会太远）</li>
<li>去根<code>DNS</code>域名服务器查询，此时会给出<code>.com</code>的顶级域名服务器</li>
<li>去<code>.com</code>服务器查询，此时会给出<code>google.com</code>的地址，这是网站注册的域名服务器</li>
<li>去<code>NameServer</code>查询，根据映射关系表找到目标<code>ip</code>，返回给<code>LDNS</code>（<code>LDNS</code>缓存域名及<code>ip</code>)</li>
<li><code>LDNS</code>解析结果返回用户（缓存到系统缓存中），域名解析结束</li>
</ol>
<h2 id="TCP与UDP"><a href="#TCP与UDP" class="headerlink" title="TCP与UDP"></a><code>TCP</code>与<code>UDP</code></h2><h3 id="TCP与UDP-1"><a href="#TCP与UDP-1" class="headerlink" title="TCP与UDP"></a><code>TCP</code>与<code>UDP</code></h3><ul>
<li><code>UDP</code>是面向无连接的，不需要在正式传递数据之前先连接起双方，不保证有序且不丢失的传递到对端，并且<code>UDP</code>也没有任何流量控制的算法，一般可以用于直播、即时通讯、即时游戏等。基于<code>UDP</code>的应用层的协议有：<code>DNS</code>、<code>TFTP</code>（简单文件传输协议）、<code>RIP</code>（路由选择协议）、<code>DHCP</code>、<code>BOOTP</code>（是DHCP的前身）、<code>IGMP</code>（Internet组管理协议）</li>
<li><code>TCP</code>无论是建立连接还是断开连接都需要先进行握手。在传输数据的过程中，通过各种算法保证数据的可靠性，不如<code>UDP</code>高效。基于<code>TCP</code>的应用层的协议有：<code>SMTP</code>、<code>TELNET</code>、<code>HTTP</code>、<code>FTP</code></li>
</ul>
<h3 id="TCP建立连接-三次握手"><a href="#TCP建立连接-三次握手" class="headerlink" title="TCP建立连接-三次握手"></a><code>TCP</code>建立连接-三次握手</h3><p>起初，两端都为<code>CLOSED</code>状态。在通信开始前，双方都会建立<code>TCB</code>(Transmission Control Block <em>传输控制块</em>)，服务器创建完<code>TCB</code>后便进入<code>LISTEN</code>状态，开始等待客户端发送数据</p>
<ul>
<li><strong>第一次握手</strong>：客户端向服务端发送连接请求报文段。该报文段包含自身的数据通讯初始序号。请求发送后，客户端进入<code>SYN-SENT</code>状态</li>
<li><strong>第二次握手</strong>：服务端接收到连接请求报文段后，如果同意连接，则会发送一个包含自身数据通讯初始序号的一个应答，发送完成后便进入<code>SYN-RECEIVED</code>状态</li>
<li><strong>第三次握手</strong>：当客户端收到同意连接的应答后，还要向服务端发送一个确认报文。客户端发送完这个报文段后便进入<code>ESTABLISHED</code>状态，服务端收到这个应答后也进入<code>ESTABLISHED</code>状态，此时连接建立成功</li>
</ul>
<h3 id="为什么TCP建立连接需要三次握手，明明两次就可以建立连接"><a href="#为什么TCP建立连接需要三次握手，明明两次就可以建立连接" class="headerlink" title="为什么TCP建立连接需要三次握手，明明两次就可以建立连接"></a>为什么<code>TCP</code>建立连接需要三次握手，明明两次就可以建立连接</h3><p><strong>防止出现失效的连接请求报文段被服务端接收的情况，从而产生错误</strong></p>
<p><code>eg.</code> <strong>加入只需要两次握手</strong>，客户端发送了一个连接请求A，但是因为网络原因造成了超时，这是<code>TCP</code>会启动超时重传的机制再次发送一个连接请求B。此时请求顺利达到服务端，服务端应答完建立了请求，然后接收数据后释放了连接</p>
<p>假设这时连接请求A 在两端关闭后抵达了服务端，那么此时服务端会认为客户端又需要建立<code>TCP</code>连接，从而应答了该请求并进入<code>ESTABLISHED</code>状态。但是客户端其实是<code>CLOSED</code>状态，会导致服务端一直等待，造成资源浪费</p>
<h3 id="TCP断开连接-四次握手"><a href="#TCP断开连接-四次握手" class="headerlink" title="TCP断开连接-四次握手"></a><code>TCP</code>断开连接-四次握手</h3><p>刚开始的时候客户端和服务端是已经建立TCP连接的，FIN(请求关闭报文段)  ACK(确认请求报文段)</p>
<ul>
<li><strong>第一次握手</strong>：客户端认为数据发送完成，向服务端发送释放连接请求</li>
<li><strong>第二次握手</strong>：服务端收到释放连接请求后，向客户端发送一个确认报文，并进入<code>CLOSE_WAIT</code>状态。此时表明客户端到服务端的连接已经释放，服务端不再接收客户端的数据，但此时服务端仍然可以发送数据给客户端</li>
<li><strong>第三次握手</strong>：服务端继续向客户端发送数据，完成后会向客户端发送连接释放请求，然后服务端进入<code>LAST_ACK</code>状态</li>
<li><strong>第四次握手</strong>：客户端收到释放请求后，向服务端发送确认应答，此时客户端进入<code>TIME_WAIT</code>状态，该状态会持续2<strong>MSL</strong>（Maximum segment Lifetime <em>最大段生存期，指报文段在网络中生存的时间，超时会被抛弃</em>）时间，若该时间段内没有服务端的重发请求就进入<code>CLOSED</code>状态。当服务端收到确认应答后也进入<code>CLOSED</code>状态</li>
</ul>
<h3 id="为什么客户端要经过2MSL时间后才从TIME-WAIT状态进入CLOSED状态"><a href="#为什么客户端要经过2MSL时间后才从TIME-WAIT状态进入CLOSED状态" class="headerlink" title="为什么客户端要经过2MSL时间后才从TIME_WAIT状态进入CLOSED状态"></a>为什么客户端要经过2<strong>MSL</strong>时间后才从<code>TIME_WAIT</code>状态进入<code>CLOSED</code>状态</h3><ul>
<li>为了保证客户端发送的最后一个ACK报文段能够达到服务器。 这个ACK报文段可能丢失，因而使处在<code>LAST-ACK</code>状态的服务器收不到确认。服务器会超时重传FIN+ACK报文段，客户端就能在2MSL时间内收到这个重传的FIN+ACK报文段，接着客户端重传一次确认，重启计时器。如果客户端在<code>TIME-WAIT</code>状态不等待一段时间，而是再发送完ACK报文后立即释放连接，那么就无法收到服务器重传的FIN+ACK报文段，因而也不会再发送一次确认报文。这样，服务器无法按照正常步骤进入<code>CLOSED</code>状态。</li>
<li>防止已失效的连接请求报文段出现在本连接中。客户端在发送完最后一个ACK确认报文段后，再经过时间2<strong>MSL</strong>，就可以使本连接持续的时间内所产生的所有报文段都从网络中消失。这样就可以使下一个新的连接中不会出现这种旧的连接请求报文段。</li>
</ul>
<h3 id="TCP如何解决数据丢包或报文顺序不对的问题？-未完成"><a href="#TCP如何解决数据丢包或报文顺序不对的问题？-未完成" class="headerlink" title="TCP如何解决数据丢包或报文顺序不对的问题？(未完成)"></a><code>TCP</code>如何解决数据丢包或报文顺序不对的问题？(未完成)</h3><p>超时重传</p>
<h3 id="TCP如何实现流量控制的？（未完成）"><a href="#TCP如何实现流量控制的？（未完成）" class="headerlink" title="TCP如何实现流量控制的？（未完成）"></a><code>TCP</code>如何实现流量控制的？（未完成）</h3><p>滑动窗口</p>
<h2 id="HTTP协议"><a href="#HTTP协议" class="headerlink" title="HTTP协议"></a><code>HTTP</code>协议</h2><h3 id="HTTP报文格式"><a href="#HTTP报文格式" class="headerlink" title="HTTP报文格式"></a>HTTP报文格式</h3><p><code>HTTP</code>请求报文：请求行（<code>request line</code>）、请求头部（<code>header</code>）、空行、请求数据（<code>request data</code>)</p>
<p><img src="https://img-blog.csdn.net/20181012111654560?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p4X2VtaWx5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img">     </p>
<ul>
<li>请求行：请求方法、<code>URL</code>（包括参数信息）、协议版本等信息（ <code>GET /admin_ui/rdx/core/images/close.png HTTP/1.1</code> ）</li>
<li>请求头部：是一个个<code>key-value</code>值</li>
<li>空行（<code>CR+LF</code>)：请求报文用空行表示<code>header</code>和请求数据的分离</li>
<li>请求数据：<code>GET</code>方法没有携带数据，<code>POST</code>方法会携带一个<code>body</code></li>
</ul>
<p><code>HTTP</code>响应报文： 状态行，响应头，空行，数据(响应体) </p>
<p><img src="https://img-blog.csdn.net/20181012172656929?watermark/2/text/aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3p4X2VtaWx5/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70" alt="img"></p>
<ul>
<li>状态行：<code>HTTP</code>版本号、状态码和状态值组成</li>
<li>响应头：类似于请求头，是一系列<code>key-value</code>值</li>
<li>空白行：用来分隔<code>header</code>和数据</li>
<li>响应体：响应的<code>data</code></li>
</ul>
<h3 id="HTTP的几种请求方法用途"><a href="#HTTP的几种请求方法用途" class="headerlink" title="HTTP的几种请求方法用途"></a><code>HTTP</code>的几种请求方法用途</h3><ul>
<li><code>get</code>方法：发送一个请求来取得服务器上的某一资源</li>
<li><code>post</code>方法：向<code>URL</code>指定的资源提交数据或附加新的数据</li>
<li><code>put</code>方法：跟<code>post</code>很像也是向服务器提交数据，<code>put</code>指定了资源在服务器上的位置，<code>post</code>没有</li>
<li><code>head</code>方法：只请求页面的首部</li>
<li><code>delete</code>方法：删除服务器上的某资源</li>
<li><code>option</code>方法：获取当前<code>URL</code>所支持的方法。请求成功会有一个<code>Allow</code>的投包含类似<code>get,post</code>的信息</li>
<li><code>trace</code>方法：被用于激发一个远程的、应用层的请求消息回路</li>
<li><code>connect</code>方法：把请求连接转换到透明的<code>TCP/IP</code>通道</li>
</ul>
<h3 id="post和get有什么区别？"><a href="#post和get有什么区别？" class="headerlink" title="post和get有什么区别？"></a><code>post</code>和<code>get</code>有什么区别？</h3><ul>
<li><strong>用法上</strong>：<code>get</code>一般用于无副作用、幂等的场景；<code>post</code>多用于有副作用、不幂等的场景<ul>
<li>幂等：发送M次和N次请求，服务器上资源状态一致</li>
<li>副作用：副作用是指对服务器上的资源做出改变</li>
</ul>
</li>
<li><strong>本质上</strong>：<code>get</code>和<code>post</code>都取决于<code>HTTP</code>。<code>HTTP</code>并没有要求<code>post</code>数据就要放在<code>body</code>中，也没有要求<code>get</code>就要把数据放在<code>URL</code>而不是<code>body</code>中</li>
<li><strong>细节上</strong>：<ul>
<li><code>get</code>能请求缓存，<code>post</code>不能</li>
<li><code>post</code>支持更多的编码类型</li>
<li><code>get</code>刷新/回退无害，<code>post</code>会再次提交</li>
<li><code>get</code>能被保存为书签，<code>post</code>不可以</li>
<li>由于浏览器<code>URL</code>有限制，所以<code>get</code>长度受限，但<code>post</code>不受限（因为在<code>body</code>里）</li>
</ul>
</li>
</ul>
<h3 id="get方法有没有请求体"><a href="#get方法有没有请求体" class="headerlink" title="get方法有没有请求体"></a><code>get</code>方法有没有请求体</h3><p><code>HTTP1.1</code>标准中并没有规定<code>get</code>方法是否可以有请求体，因此<code>get</code>方法是可以带请求体的，完全符合标准。<code>Elastic Search</code>中就是用<code>get</code>方法的请求体传递搜索条件，为了兼容性考虑，<code>Elastic Search</code>也接受<code>post</code>+请求体</p>
<h3 id="get和post的长度问题"><a href="#get和post的长度问题" class="headerlink" title="get和post的长度问题"></a><code>get</code>和<code>post</code>的长度问题</h3><p><code>get</code>方法：理论上<code>get</code>请求数据长度是没有限制的，真正起到限制作用的是浏览器对其长度进行了限制</p>
<p><code>post</code>方法：理论上<code>post</code>请求数据长度是没有限制的，真正起到限制作用的是服务器的处理能力</p>
<h3 id="HTTP常用请求头部"><a href="#HTTP常用请求头部" class="headerlink" title="HTTP常用请求头部"></a><code>HTTP</code>常用请求头部</h3><p><strong>通用</strong></p>
<ul>
<li><code>cache-control</code>：控制缓存行为</li>
<li><code>connection</code>：连接的性质，比如<code>keep-alive</code></li>
<li><code>user-Agent</code>： 用户信息，简称<code>UA</code>，是一个特殊字符串头，使得服务器能够识别客户使用的操作系统及版本、<code>CPU</code>类型、浏览器及版本、浏览器渲染引擎、浏览器语言、浏览器插件等。一些网站常常通过判断<code>UA</code>来给不同的操作系统、不同的浏览器发送不同的页面 </li>
<li><code>Date</code>：报文创建时间</li>
</ul>
<p><strong>请求</strong></p>
<ul>
<li><code>Referrer policy</code>：表示来源的（浏览器所访问的前一个页面），可以用于辅助检测<code>crsf</code>攻击，一般浏览器的默认值是<code>no-referere-when-downgrade</code>，意思是<code>https</code>降级<code>http</code>的时候不传原地址</li>
<li><code>Accept</code>：能正确接收的媒体类型</li>
<li><code>Accept-xx</code><strong>（Accept-Charset/Accept-Encoding/Accept-Language）</strong>：能正确接收的xx</li>
<li><code>Expect</code>：期待服务端的指定行文</li>
<li><code>If-Match</code>：两端资源标记比较    </li>
<li><code>If-Modified-Since</code>：比较时间，未修改返回<code>304 Not Modified</code></li>
<li><code>If-None-Match</code>：比较标记，未修改返回<code>304 Not Modified</code></li>
</ul>
<p><strong>响应</strong></p>
<ul>
<li><code>Location</code>：重定向到某个<code>Location</code></li>
<li><code>Server</code>：服务器名字</li>
<li><code>Age</code>：响应存在时间</li>
<li><code>Accept-Ranges</code>：可以接受的范围类型</li>
</ul>
<h4 id="HTTP请求中connection-keep-alive的意义在哪里"><a href="#HTTP请求中connection-keep-alive的意义在哪里" class="headerlink" title="HTTP请求中connection = keep-alive的意义在哪里"></a><code>HTTP</code>请求中<code>connection = keep-alive</code>的意义在哪里</h4><p><code>HTTP</code>是基于<code>TCP</code>的，每一个<code>HTTP</code>请求都需要进行三次握手。如果一个页面对某一个域名有多个请求，就会进行频繁的建立连接和断开连接。所以<code>HTTP1.0</code>中出现了<code>connection = keep-alive</code>，用于建立长连接。<code>keep-alive</code>模式更加高效，因此避免了连接建立和释放的开销。但是长时间的<code>TCP</code>连接容易导致系统资源无效占用，配置不当的<code>keep-alive</code>有时比重复利用连接带来的损失更大。所以，正确设置<code>keep-alive</code>的<code>timeout</code>时间非常重要</p>
<h3 id="HTTP状态码"><a href="#HTTP状态码" class="headerlink" title="HTTP状态码"></a><code>HTTP</code>状态码</h3><ul>
<li><p><strong>1XX</strong>：信息状态码</p>
<ul>
<li><code>100 Continue</code>：客户端应重新发请求</li>
<li><code>101 Switching Protocols</code>：改用协议<code>HTTP</code>换到<code>HTTPS</code>或者<code>HTTP1.1</code>换到<code>2.0</code>之类的</li>
<li><code>105</code>：DNS解析失败</li>
</ul>
</li>
<li><p><strong>2XX</strong>：成功状态码       </p>
<ul>
<li><code>200 OK</code>：操作成功</li>
<li><code>201 Created</code>：按照客户端的请求创建了一个新资源</li>
<li><code>202 Acceptd</code>：已接受请求但尚未处理</li>
<li><code>204 No Content</code>：请求成功，但是报文不含实体的主体部分</li>
<li><code>205 Reset Content</code>：请求成功，但是报文不含实体的主体部分，要求客户端重置内容</li>
<li><code>206 Partial Content</code>：进行范围请求</li>
</ul>
</li>
<li><p><strong>3XX</strong>：重定向</p>
<ul>
<li><code>301 Moved Permanetly</code>：永久性重定向，资源已经被分配到了新的<code>URL</code></li>
<li><code>302 Found</code>：临时重定向，资源临时分配了<code>URL</code>，实际上大部分客户端把它当成了<strong>303</strong>处理</li>
<li><code>303 See Other</code>：表示资源存在另一个<code>URL</code>，应用<code>get</code>获取资源</li>
<li><code>304 Not Modified</code>：允许访问资源，但实体主体为空（客户端已经有此数据，不需要再次发送）</li>
<li><code>307 Temporary Redirect</code>：临时重定向，资源临时分配了<code>URL</code>，但是希望客户端能够保持方法不变请求新地址</li>
</ul>
</li>
<li><p><strong>4XX</strong>：客户端错误</p>
<ul>
<li><code>400 Bad Request</code>：请求报文语法错误</li>
<li><code>401 Unauthorized</code>：发送的请求需要通过验证，客户端试图操作一个受保护的资源但没有认证证书</li>
<li><code>403 Forbidden</code>：请求资源存在但被拒绝，常用于一个资源只允许在特定时间段内访问</li>
<li><code>404 Not Found</code>：找不到请求资源</li>
<li><code>405 Method Not Allowed</code>：不支持的请求方法，比如只支持<code>get</code>，但是收到了<code>post</code></li>
</ul>
</li>
<li><p><strong>5XX</strong>：服务端错误</p>
<ul>
<li><code>500 Internal Server Error</code>：执行请求时发生错误</li>
<li><code>501 Not Implemented</code>：不支持此请求方法（405是访问的资源不支持，501是服务器不能操作此方法）</li>
<li><code>502 Bad Gateway</code>：代理与上行服务器之间出现问题</li>
<li><code>503 Service Unavailable</code>：服务器暂时处于超负荷或者维护中</li>
</ul>
</li>
</ul>
<h4 id="状态码204的可能原因"><a href="#状态码204的可能原因" class="headerlink" title="状态码204的可能原因"></a>状态码204的可能原因</h4><ul>
<li>服务器拒绝请求返回</li>
<li><code>get</code>资源存在但表示是空的。服务器通过这个状态码告诉客户端：客户端的输入已被接受，但客户端不应该改变任何UI元素</li>
</ul>
<h4 id="状态码204和205的区别"><a href="#状态码204和205的区别" class="headerlink" title="状态码204和205的区别"></a>状态码204和205的区别</h4><ul>
<li><p>204和205的区别在于<strong>205要求了重置</strong></p>
<p>用一个表单为例，如果提交后返回204，那么表单里的各个字段值不变，可以继续修改他们；但假如得到的响应代码205，那么表单里的各个字段将被重置为它们的初始值</p>
</li>
</ul>
<h4 id="状态码304的可能原因"><a href="#状态码304的可能原因" class="headerlink" title="状态码304的可能原因"></a>状态码304的可能原因</h4><p>这个与浏览器的协商缓存有关。</p>
<ol>
<li>当用户第一次请求资源A时，服务器会添加一个名为<code>Last-Modified</code>的响应头，这个响应头说明了A的<strong>最后修改时间</strong>，浏览器会把A的内容及最后的相应时间缓存下来</li>
<li>当用户第二次请求资源A时，在请求中包含一个名为<code>If-Modified-Since</code>的请求头，它的值就是第一次请求时服务器通过<code>Last-Modified</code>响应头发送给浏览器的值，即资源A最后的修改时间</li>
<li>服务器会获取<code>If-Modified-Since</code>的值，与<strong>A当前的最后修改时间</strong>做对比。如果相同，则服务器返回304状态码，表示A与浏览器上次缓存的时间相同，浏览器可以显示自己的缓存页面；如果不相同，说明A已经改变，服务器会返回200状态码</li>
</ol>
<h3 id="HTTP协议中的长短连接和长短轮询"><a href="#HTTP协议中的长短连接和长短轮询" class="headerlink" title="HTTP协议中的长短连接和长短轮询"></a><code>HTTP</code>协议中的长短连接和长短轮询</h3><ul>
<li><strong>短连接</strong>：即连接只保持在数据传输过程，请求发起、请求建立、数据返回、连接关闭。它适用于一些实时数据请求。</li>
<li><strong>长连接</strong>：即连接发起后，在请求关闭前客户端与服务器都保持连接，实质是保持这个连接通道，之后可以进行复用</li>
</ul>
<ul>
<li><em>短轮询</em>：指在循环周期内不断发起请求，每一次请求都立即返回结果，根据新旧数据对比决定是否使用这个结果</li>
<li><em>长轮询</em>：在请求的过程中若是服务器端数据没有更新则将这个连接挂起，直到服务器推送新的数据</li>
</ul>
<h4 id="长短连接和长短轮询的区别"><a href="#长短连接和长短轮询的区别" class="headerlink" title="长短连接和长短轮询的区别"></a>长短连接和长短轮询的区别</h4><ul>
<li><strong>决定方式</strong>：一个<code>TCP</code>是否为长连接是通过设置<code>HTTP</code>的<code>Connection Header</code>来决定的，而且需要两边都设置才有效；而一种轮询方式是否为长轮询，是根据服务端的处理方式来决定的，与客户端没有关系</li>
<li><strong>实现方式</strong>：连接的长短是通过协议来规定和实现的。而轮询的长短是服务器通过编程的方式手动挂起请求来实现的</li>
</ul>
<h2 id="HTTP与HTTPS"><a href="#HTTP与HTTPS" class="headerlink" title="HTTP与HTTPS"></a><code>HTTP</code>与<code>HTTPS</code></h2><h3 id="HTTP为什么不安全"><a href="#HTTP为什么不安全" class="headerlink" title="HTTP为什么不安全"></a><code>HTTP</code>为什么不安全</h3><ul>
<li>数据以明文传输，有被窃听的风险</li>
<li>接收到的报文无法证明是发送时的报文，不能保证完整性，报文有被篡改的风险</li>
<li>不能验证通信两端的身份，请求或响应有被伪造的风险</li>
</ul>
<h3 id="HTTP与HTTPS有什么区别"><a href="#HTTP与HTTPS有什么区别" class="headerlink" title="HTTP与HTTPS有什么区别"></a><code>HTTP</code>与<code>HTTPS</code>有什么区别</h3><ul>
<li><p><code>https</code>协议需要到ca申请证书，一般免费证书较少，因而需要一定费用。</p>
</li>
<li><p><code>http</code>是超文本传输协议，信息是明文传输，<code>https</code>则是具有安全性的<code>SSL</code>(Secure Socket Layer)加密传输协议。</p>
</li>
<li><p><code>http</code>和<code>https</code>使用的是完全不同的连接方式，用的端口也不一样，前者是80，后者是443。</p>
</li>
<li><p><code>http</code>的连接很简单，是无状态的；HTTPS协议是由<code>SSL</code>+<code>HTTP</code>协议构建的可进行加密传输、身份认证的网络协议，比<code>http</code>安全。</p>
</li>
</ul>
<h4 id="TLS-Secure-Socket-Layer"><a href="#TLS-Secure-Socket-Layer" class="headerlink" title="TLS(Secure Socket Layer)"></a>TLS(Secure Socket Layer)</h4><p><strong><code>HTTPS</code></strong>仍用<code>HTTP</code>传输信息，但信息通过<code>TLS</code>进行了加密，其间用到了两种加密技术。</p>
<ul>
<li>对称加密：通信双方有相同的秘钥</li>
<li>非对称加密：数据公钥加密，私钥解密，私钥只有发出公钥的一方知道</li>
</ul>
<p><code>TLS</code>加密流程大致如下：</p>
<ol>
<li>服务器将公钥发散出去</li>
<li>客户端创建对称加密的秘钥，用公钥加密后发送给服务器</li>
<li>服务器用私钥解密</li>
<li>之后客户端和服务器采用对称加密的方式进行数据传输</li>
</ol>
<h3 id="HTTPS的缺点"><a href="#HTTPS的缺点" class="headerlink" title="HTTPS的缺点"></a><code>HTTPS</code>的缺点</h3><ul>
<li>通信两端都需要进行加密和解密，会消耗大量的CPU、内存等资源，增加了服务器的负担</li>
<li>加密运算和多次握手降低了访问速度</li>
<li>在开发阶段加大了页面调试难度。由于信息被加密了，所以用代理工具的话，需要先解密才能看到真实信息</li>
<li>用<code>HTTPS</code>访问的页面，页面内的外部资源都得用<code>HTTPS</code>请求，包括脚本中的<code>Ajax</code>请求</li>
</ul>
<h3 id="HTTPS的单向认证和双向认证"><a href="#HTTPS的单向认证和双向认证" class="headerlink" title="HTTPS的单向认证和双向认证"></a><code>HTTPS</code>的单向认证和双向认证</h3><ul>
<li><strong>单向认证</strong><ul>
<li>客户端保存着服务器的证书并信任改证书</li>
<li><code>https</code>一般是单向认证，这样可以让绝大部分人访问该网点</li>
</ul>
</li>
<li><strong>双向认证</strong>：一般用于企业应用对接<ul>
<li>需要有两个或两个以上证书，一个是服务器证书，其它是客户端证书</li>
<li>服务器保存着客户端的证书并信任改证书，客户端保存着服务器的证书并信任该证书</li>
</ul>
</li>
</ul>
<h2 id="HTTP2-0"><a href="#HTTP2-0" class="headerlink" title="HTTP2.0"></a><code>HTTP2.0</code></h2><h3 id="HTTP2-0的新特性"><a href="#HTTP2-0的新特性" class="headerlink" title="HTTP2.0的新特性"></a><code>HTTP2.0</code>的新特性</h3><p><code>http2.0</code>是对<code>http1.0</code>的改进，相较于<code>htttp1.0</code>更快更高效</p>
<ul>
<li><strong>多路复用</strong>：通过一个<code>TCP</code>连接传输所有数据。一个请求对应一个ID，这样一个连接上可以有多个请求，每个连接的请求可以随机的混杂在一起，接收方可以根据请求的id将请求再归属到各自不同的服务器端请求里面</li>
<li><strong>二进制分帧层</strong>：<code>HTTP2.0</code>性能增强的关键，它改变了通信两端交互数据的方式。原先是以文本传输，现在要先对数据进行二进制编码，再把数据分成一个一个的帧，接着把帧送到数据流中，最后对方接收帧并拼接成一条消息，再处理请求</li>
<li><strong>首部压缩</strong>：<code>HTTP1.X</code>的<code>header</code>带有大量信息，而且每次都需要重复发送，<code>HTTP2.0</code>使用<code>encoder</code>来减少需要传输的<code>header</code>大小，通讯双方各自<code>cache</code>一份<code>header fields</code>表，既避免了重复<code>header</code>的传输，又减小了传输大小</li>
<li><strong>服务器推送</strong>：<code>HTTP2.0</code>支持服务器主动推送，简单地说就是一次请求返回多个响应，这也是减少<code>HTTP</code>请求的方法。服务器出了处理最初的请求外，还会额外<code>push</code>客户端一定会请求的资源，无需客户端发出明确的请求</li>
</ul>
<h3 id="HTTP2-0存在的问题"><a href="#HTTP2-0存在的问题" class="headerlink" title="HTTP2.0存在的问题"></a><code>HTTP2.0</code>存在的问题</h3><p><code>http2.0</code>使用了多路复用，一般来说同一域名下只需要使用一个<code>TCP</code>连接。但是当连接中出现丢包时，整个<code>TCP</code>都要开始等待重传，后面的数据也都被阻塞了。而<code>http1.0</code>可以开启多个连接，只会影响一个，不会影响其他的</p>
<p>所以在<strong>丢包情况下，http2.0的情况反而不如http1.0</strong></p>
<h2 id="HTTP3-0"><a href="#HTTP3-0" class="headerlink" title="HTTP3.0"></a><code>HTTP3.0</code></h2><p>为了解决2.0丢包性能的问题，Google基于<code>UDP</code>提出了<code>QUIC</code>协议。</p>
<h3 id="QUIC协议的特性"><a href="#QUIC协议的特性" class="headerlink" title="QUIC协议的特性"></a><code>QUIC</code>协议的特性</h3><ul>
<li><strong>多路复用</strong>：<code>QUIC</code>原始就包含此功能，并且传输的数据流可以保证有序教辅且不会影响其他数据流；其在移动端的表现也比<code>TCP</code>好，因为<code>TCP</code>基于<strong>IP+端口识别</strong>连接，不适合多变的网络环境，但是<code>QUIC</code>是通过<strong>ID识别连接，不论网络如何变化，只要ID不变，就能迅速连上</strong></li>
<li><strong>纠错机制</strong>：假如说这次要发送三个包，协议会算出这三个包的异或值并单独发一个校验包，也就是总共发出了四个包。当出现其中医德非校验包丢失的情况时，可以通过另外三个包计算出丢失的数据包的内容。当然这种技术只能使用在丢失一个包的情况下，如果丢失多个包就只能使用重传的方式。</li>
<li><strong>0-RTT</strong>：通过使用类似<code>TCP</code>快速打开的技术，缓存当前会话的上下文，在下次恢复会话的时候，只需要将之前的缓存传递给服务端验证通过就可以进行传输了</li>
</ul>
<h1 id="前后端数据交互"><a href="#前后端数据交互" class="headerlink" title="前后端数据交互"></a>前后端数据交互</h1><h2 id="交互方式"><a href="#交互方式" class="headerlink" title="交互方式"></a>交互方式</h2><h3 id="1-Cookie"><a href="#1-Cookie" class="headerlink" title="1. Cookie"></a>1. Cookie</h3><p><code>Cookie</code>是一些数据，存储于电脑上的文本文件中，只要客户端<code>cookie</code>开放且有数据，每一次请求都会自动添加到<code>http</code>报文中，后台可以实时接收观察获取这些<code>cookie</code></p>
<p><code>Cookie</code>的作用就是解决”如何记录客户端的用户信息”</p>
<ul>
<li>当用户访问<code>web</code>页面时，他的名字可以记录在<code>cookie</code>中</li>
<li>在用户下一次访问该页面时，可以再<code>cookie</code>中读取用户访问记录</li>
</ul>
<h3 id="2-Session"><a href="#2-Session" class="headerlink" title="2. Session"></a>2. Session</h3><p><code>Session</code>对象表示特定会话<code>session</code>的用户数据</p>
<p>用户第一次访问支持<code>session</code>的<code>JSP</code>网页时，服务器会创建一个<code>session</code>对象记录用户的信息，当用户访问同一网站的不同网页时，仍处于同一个<code>session</code>中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.getSession.setAttribute(<span class="string">"sessionName"</span>, <span class="string">"sessionValue"</span>);</span><br><span class="line">request.getSession.getAttribute(<span class="string">"sessionName"</span>);</span><br></pre></td></tr></table></figure>

<p>只要浏览器不关闭就能使用。所以用户访问网站的整个生命周期都会用到的数据一般都用<code>session</code>来存储，比如用户名、登录状态等</p>
<h3 id="3-利用Request参数设置"><a href="#3-利用Request参数设置" class="headerlink" title="3. 利用Request参数设置"></a>3. 利用Request参数设置</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">request.setAttribute(<span class="string">"requestName"</span>, <span class="string">"requestValue"</span>);</span><br><span class="line">request.getRequest.Dispatcher(<span class="string">"welcome.jsp"</span>).forward(request, response);</span><br><span class="line"></span><br><span class="line">request.getAttribute(<span class="string">"requestName"</span>);</span><br></pre></td></tr></table></figure>

<p>不能用<code>sendRedirect()</code>，因为已经切换到另一个请求了，request参数的有效期为本次请求</p>
<h3 id="4-Form表单"><a href="#4-Form表单" class="headerlink" title="4. Form表单"></a>4. Form表单</h3><p><code>Form</code>表单的<code>action</code>设置好路径</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">id</span>=<span class="string">"loginform"</span> <span class="attr">name</span>=<span class="string">"looginform"</span> <span class="attr">action</span>=<span class="string">"&lt;%=path %&gt;/login"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span>  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-Ajax"><a href="#5-Ajax" class="headerlink" title="5. Ajax"></a>5. Ajax</h3><ul>
<li>原理：在用户和服务器之间加了—个中间层(<code>AJAX</code>引擎)，通过<code>XMLHttpRequest</code> 对象来向服务器发异步请求，从服务器获得数据，然后用<code>javascript</code>来操作<code>DOM</code> 更新页面。使用户操作与服务器响应异步化。这其中最关键的一步就是从服务器获得请求数据</li>
<li><code>Ajax</code> 的过程只涉及<code>JavaScript</code> 、<code>XMLHttpRequest</code> 和<code>DOM</code> 。<code>XMLHttpRequest</code> 是<code>ajax</code>的核心机制</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 创建连接</span></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="literal">null</span>;</span><br><span class="line">xhr = <span class="keyword">new</span> XMLHttpRequest()</span><br><span class="line"><span class="comment">// 2. 连接服务器</span></span><br><span class="line">xhr.open(<span class="string">'get'</span>, url, <span class="literal">true</span>)</span><br><span class="line"><span class="comment">// 3. 发送请求</span></span><br><span class="line">xhr.send(<span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 4. 接受请求</span></span><br><span class="line">xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(xhr.readyState == <span class="number">4</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(xhr.status == <span class="number">200</span>)&#123;</span><br><span class="line">        	success(xhr.responseText);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123; <span class="comment">// fail</span></span><br><span class="line">        	fail &amp;&amp; fail(xhr.status);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="cookie和session的对比"><a href="#cookie和session的对比" class="headerlink" title="cookie和session的对比"></a>cookie和session的对比</h3><ul>
<li><p>cookie数据存放在客户的浏览器上，session数据放在服务器上。</p>
</li>
<li><p>cookie不是很安全，别人可以分析存放在本地的COOKIE并进行COOKIE欺骗，考虑到安全应当使用session。</p>
</li>
<li><p>session会在一定时间内保存在服务器上。当访问增多，会比较占用你服务器的性能，考虑到减轻服务器性能方面，应当使用COOKIE。</p>
</li>
<li><p>单个cookie保存的数据不能超过4K，很多浏览器都限制一个站点最多保存20个cookie。</p>
</li>
<li><p>所以建议：</p>
<ul>
<li>将登录信息等重要信息存放为SESSION</li>
<li>其他信息如果需要保留，可以放在COOKIE中</li>
</ul>
</li>
</ul>
<h2 id="性能改进"><a href="#性能改进" class="headerlink" title="性能改进"></a>性能改进</h2><h3 id="Comet"><a href="#Comet" class="headerlink" title="Comet"></a>Comet</h3><p><code>Comet</code>的实现主要有两种方式，基于<code>ajax</code>的长轮询方式和基于<code>iframe</code>和<code>htmlfile</code>的流（http streaming）方式。而这些大部分功能都在后台完成，前端要做的就是通过<code>ajax</code>请求成功后，在<code>XMLHttpRequest</code>的<code>onReadystatechange</code>函数中持续获取数据。</p>
<p>典型 <code>ajax</code>通信方式也是<code>http</code>协议的经典使用方式，要想获得数据，首先得发送请求。在低延迟要求比较高的<code>web</code>应用中，只能增加服务器请求的频率。<code>Comet</code>则不同，<strong>客户端与服务端保持一个长连接，只有客户端需要的数据更新时，服务器才主动将数据推送给客户端</strong></p>
<h3 id="SSE"><a href="#SSE" class="headerlink" title="SSE"></a>SSE</h3><p>SSE是一种允许服务端向客户端推送新数据的HTML5技术。它是 WebSocket 的一种轻量代替方案，使用 HTTP 协议。</p>
<p>严格地说，HTTP 协议是没有办法做服务器推送的，但是当服务器向客户端声明接下来要发送流信息时，客户端就会保持连接打</p>
<p>开，SSE 使用的就是这种原理</p>
<p>与由客户端每隔几秒从服务端轮询拉取新数据相比，这是一种更优的解决方案。</p>
<p>应用场景：例如邮箱服务的新邮件提醒，微博的新消息推送、管理后台的一些操作实时同步等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> source=<span class="keyword">new</span> EventSource(<span class="string">"myevent"</span>);</span><br><span class="line">source.onmessage=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(event.data);</span><br><span class="line">&#125;;</span><br><span class="line">source.onerror=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"失败，连接状态"</span>+source.readySate)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>EventSource对象参数为入口点，必须与创建对象的页面同源(url模式，域、端口)。连接断开会自动建立,或者使用source.close()强</p>
<p>制断开。open事件在连接建立时触发，message事件在接收到新数据时触发，error事件在无法建立连接时触发。推送数据保存在</p>
<p>event.data中。</p>
<h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><p>Websocket是一个全新的、独立的协议，基于TCP协议，与http协议兼容、却不会融入http协议。他被设计出来的目的就是要取代</p>
<p>轮询和 Comet 技术。</p>
<p>WebSocket通过单个TCP连接提供全双工（双向通信）通信信道的计算机通信协议。此WebSocket API可在用户的浏览器和服务器</p>
<p>之间进行双向通信。用户可以向服务器发送消息并接收事件驱动的响应，而无需轮询服务器。 它可以让多个用户连接到同一个时</p>
<p>服务器，并通过API进行通信并立即获得响应。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> socket=<span class="keyword">new</span> WebSocket(<span class="string">"url"</span>)；</span><br><span class="line">	socket.send(<span class="string">"hello world"</span>);</span><br><span class="line">	socket.onmessage=<span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(event.data);</span><br><span class="line">	<span class="built_in">console</span>.log(event.readyState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>它允许用户和服务器之间的流连接，并允许即时信息交换。在聊天应用程序的示例中，通过套接字汇集消息，可以实时与一个或多</p>
<p>个用户交换，具体取决于谁在服务器上“监听”（连接）。</p>
<p>WebSockets适用于需要实时更新和即时信息交换的任何应用程序。一些示例包括但不限于：现场体育更新，股票行情，多人游戏，聊天应用，社交媒体等。</p>
<h2 id="请求方式变化"><a href="#请求方式变化" class="headerlink" title="请求方式变化"></a>请求方式变化</h2><h3 id="jquery-ajax"><a href="#jquery-ajax" class="headerlink" title="jquery ajax"></a>jquery ajax</h3><p>JQuery ajax 是对原生XHR的封装，除此以外还增添了对JSONP的支持。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> jsondata=&#123;</span><br><span class="line">        <span class="string">"name"</span>:<span class="string">"Sarrans"</span>,</span><br><span class="line">        <span class="string">"password"</span>:<span class="string">"123456"</span></span><br><span class="line">    &#125;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type:<span class="string">"post"</span>,</span><br><span class="line">        url:<span class="string">"login"</span>,</span><br><span class="line">        data:jsondata,</span><br><span class="line">        success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">        	alert(data.name+<span class="string">"请求成功"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        error:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">        	alert(<span class="string">"Error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>缺点：</p>
<ul>
<li>本身是针对MVC的编程,不符合现在前端MVVM的浪潮</li>
<li>基于原生的XHR开发，XHR本身的架构不清晰。</li>
<li>JQuery整个项目太大，单纯使用ajax却要引入整个JQuery非常的不合理（采取个性化打包的方案<br>又不能享受CDN服务）</li>
<li>不符合关注分离（Separation of Concerns）的原则</li>
<li>配置和调用方式非常混乱，而且基于事件的异步模型不友好。</li>
</ul>
<h3 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h3><p>fetch号称是A JAX的替代品，是在ES6出现的，使用了ES6中的promise对象。Fetch是基于promise设计<br>的。Fetch的代码结构比起ajax简单多了，参数有点像jQuery ajax。但是，fetch不是ajax的进一步封<br>装，而是原生js，没有使用XMLHttpRequest对象。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> response = <span class="keyword">await</span> fetch(url);</span><br><span class="line">    <span class="keyword">let</span> data = response.json();</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125; <span class="keyword">catch</span>(e) &#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">"Oops, error"</span>, e);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：</p>
<ul>
<li>符合关注分离，没有将输入、输出和用事件来跟踪的状态混杂在一个对象里</li>
<li>语法简洁，更加语义化</li>
<li>基于标准 Promise 实现，支持 async/await</li>
<li>同构方便，使用 isomorphic-fetch</li>
<li>脱离了XHR，是ES规范里新的实现方式</li>
<li>更加底层，提供的API丰富（request, response）</li>
</ul>
<p>缺点：</p>
<ul>
<li>fetch只对网络请求报错，对400，500都当做成功的请求，服务器返回 400，500 错误码时并不会<br>reject，只有网络错误这些导致请求不能完成时，fetch 才会被 reject。</li>
<li>fetch默认不会带cookie，需要添加配置项： fetch(url, {credentials: ‘include’})</li>
<li>fetch不支持abort，不支持超时控制，使用setTimeout及Promise.reject的实现的超时控制并不能</li>
<li>阻止请求过程继续在后台运行，造成了流量的浪费</li>
<li>fetch没有办法原生监测请求的进度，而XHR可以</li>
</ul>
<h3 id="axios"><a href="#axios" class="headerlink" title="axios"></a>axios</h3><p>axios 是一个基于Promise 用于浏览器和 nodejs 的 HTTP 客户端，本质上也是对原生XHR的封装，只不<br>过它是Promise的实现版本，符合最新的ES规范。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios(&#123;</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    url: <span class="string">'/user/12345'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        firstName: <span class="string">'Fred'</span>,</span><br><span class="line">        lastName: <span class="string">'Flintstone'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>特点：</p>
<ul>
<li>从浏览器中创建 XMLHttpRequest</li>
<li>支持 Promise API</li>
<li>客户端支持防止CSRF</li>
<li>提供了一些并发请求的接口（重要，方便了很多的操作）</li>
<li>从 node.js 创建 http 请求</li>
<li>拦截请求和响应</li>
<li>转换请求和响应数据</li>
<li>取消请求</li>
<li>自动转换JSON数据</li>
</ul>
<h1 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h1><h2 id="跨域的原因"><a href="#跨域的原因" class="headerlink" title="跨域的原因"></a>跨域的原因</h2><p>当一个资源从与该资源本身所在服务器中不同域、协议、端口请求一个资源时，出于安全原因，浏览器限制从脚本内发起的跨源<code>HTTP</code>请求、<code>XMLHttpRequest</code>和<code>Fetch API</code></p>
<p>引入这个机制主要是用来防止<code>CSRF</code>攻击的（利用用户的登录态发起恶意请求，跨域并不能完全阻止CSRF）。没有同源策略的情况下，A网站可以被任意其他来源的<code>ajax</code>访问到内容。如果用户当前在A网站还存在登录态，那么对方就可以通过<code>ajax</code>获得你的任何信息。</p>
<h2 id="解决跨域的方式"><a href="#解决跨域的方式" class="headerlink" title="解决跨域的方式"></a>解决跨域的方式</h2><h3 id="JSONP"><a href="#JSONP" class="headerlink" title="JSONP"></a>JSONP</h3><ul>
<li><p>原理：利用<code>&lt;script&gt;</code>标签没有跨域限制的漏洞</p>
</li>
<li><p>用法：通过<code>&lt;script&gt;</code>标签指向一个需要访问的地址并提供一个回调函数来接收数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src=<span class="string">"http://domain/api?param1=a&amp;param2=b&amp;callback=jsonp"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">function jsonp(data) &#123;</span></span><br><span class="line"><span class="regexp">    console.log(data)</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>优点：使用简单且兼容性不错</p>
</li>
<li><p>缺点：只限于<code>get</code>请求</p>
</li>
<li><p>扩展：在开发过程中可能会遇到多个<code>JSONP</code>请求的函数的回调函数名是相同的，这时候需要手动封装一个<code>JSONP</code>，以下是简单实现</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">jsonp</span>(<span class="params">url, jsonpCallback, success</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>)</span><br><span class="line">    script.src = url</span><br><span class="line">    script.async = <span class="literal">true</span></span><br><span class="line">    script.type = <span class="string">'text/javascript'</span></span><br><span class="line">    <span class="built_in">window</span>[jsonpCallback] = <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    	success &amp;&amp; success(data)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(script)</span><br><span class="line">&#125;</span><br><span class="line">jsonp(<span class="string">'http://xxx'</span>, <span class="string">'callback'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="CORS（-Cross-Origin-Resource-Sharing，跨域资源共享）"><a href="#CORS（-Cross-Origin-Resource-Sharing，跨域资源共享）" class="headerlink" title="CORS（ Cross-Origin Resource Sharing，跨域资源共享）"></a>CORS（ Cross-Origin Resource Sharing，<em>跨域资源共享</em>）</h3><ul>
<li>原理：浏览器会自动进行<code>CORS</code>通信，只要后端实现了<code>CORS</code>，就实现了跨域<ul>
<li>服务端设置<code>Access-Control-Allow-Origin</code>就可以开启<code>CORS</code>，该属性表示哪些域名可以访问资源，如果设置通配符则表示所有网站都可以访问资源</li>
<li>前端发送请求时会出现两种情况，分别为<strong>简单请求</strong>和<strong>预检请求</strong><ul>
<li>简单请求：简单<code>get</code>请求</li>
<li>预检请求：规范要求对那些可能对服务器数据产生副作用的<code>HTTP</code>请求方法（特别是<code>get</code>以外的<code>http</code>请求或者搭配某些<code>MIME</code>类型的<code>post</code>请求），**浏览器必须先使用<code>OPTIONS</code>方法发起一个预检请求（<code>preflight request</code>），从而货值服务器是否允许该跨域请求。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="document-domain"><a href="#document-domain" class="headerlink" title="document.domain"></a>document.domain</h3><p>该方法用于主域相同而子域不同的情况如：<code>a.test.com</code>和<code>b.test.com</code></p>
<h3 id="iframe"><a href="#iframe" class="headerlink" title="iframe"></a>iframe</h3><p>具体操作可见：[iframe跨域操作](‘ <a href="https://www.cnblogs.com/happy-8090/p/11570998.html" target="_blank" rel="noopener">https://www.cnblogs.com/happy-8090/p/11570998.html</a> ‘)</p>
<ul>
<li><p>用<code>iframe</code>的获取方式：只能显示，不能控制</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a.location.hash</span><br><span class="line">b.window.name</span><br></pre></td></tr></table></figure>
</li>
<li><p><code>iframe + postMessage</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.postMessage(data, origin)</span><br></pre></td></tr></table></figure>

<p>子页面向父页面传递数据，则在子页面中调用父级<code>window</code>和<code>postMessage</code></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.parent.postMessage=<span class="function"><span class="keyword">function</span>(<span class="params">data, origin</span>)</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h1 id="框架（未完成）"><a href="#框架（未完成）" class="headerlink" title="框架（未完成）"></a>框架（未完成）</h1><h2 id="MVC"><a href="#MVC" class="headerlink" title="MVC"></a>MVC</h2><p>  <img src="https://www.runoob.com/wp-content/uploads/2014/08/1200px-ModelViewControllerDiagram2.svg_.png" alt="img"> </p>
<p><code>M（Model）</code>：  模型 代表一个存取数据的对象或 JAVA POJO。它也可以带有逻辑，在数据变化时更新控制器 </p>
<p><code>V（View）</code>： 视图代表模型包含的数据的可视化 </p>
<p><code>C（Controller）</code>： 控制器作用于模型和视图上。它控制数据流向模型对象并在数据变化时更新视图。它使视图与模型分离开 </p>
<h2 id="MVP"><a href="#MVP" class="headerlink" title="MVP"></a>MVP</h2><p><img src="C:%5CUsers%5CyangXM%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1584927856748.png" alt="1584927856748"></p>
<p><code>M(model)</code>：业务逻辑层，主要负责数据、网络请求等操作</p>
<p><code>V(View)</code>：视图层，负责绘制UI元素、与用户进行交互</p>
<p><code>P(Presenter)</code>：是<code>View</code>与<code>model</code>交互的中间纽带，处理与用户交互的逻辑</p>
<h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p><img src="C:%5CUsers%5CyangXM%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1584936997266.png" alt="1584936997266"></p>
<p><code>M(Model)</code>：数据模型，也可以在Model中定义数据修改和操作的业务逻辑</p>
<p><code>V(View)</code>：负责将数据模型转换成UI展现出来</p>
<p><code>VM(ViewModel)</code>：同步View和Model的对象</p>
<p>在MVVM框架下，View和Model之间通过ViewModel进行交互，ViewModel通过数据双向绑定把View和Model曾连接了起来。View数据变化会同步到Model中，而Model数据变化也会立即反映到View上。因此开发者只需要关注业务逻辑，不需要手动操作DOM，不需要关注数据状态的同步问题，复杂的数据状态维护完全由MVVM来统一管理</p>
<p>对于MVVM来说最重要的不是通过双向绑定或者其他的方式将View和ViewModel绑定起来，<strong><em>而是通过ViewModel将视图中的状态和用户的行为分理出一个抽象</em></strong>。</p>
<h2 id="REACT"><a href="#REACT" class="headerlink" title="REACT"></a>REACT</h2><h3 id="为什么要用React"><a href="#为什么要用React" class="headerlink" title="为什么要用React"></a>为什么要用React</h3><p>解决了三个问题： 1.组件复用问题  2.性能问题  3.兼容性问题</p>
<p>优点：</p>
<ul>
<li><p>只需查看 render 函数就会很容易知道一个组件是如何被渲染的</p>
</li>
<li><p>JSX 的引入，使得组件的代码更加可读，也更容易看懂组件的布局，或者组件之间是如何互相引用的</p>
</li>
<li><p>支持服务端渲染，这可以改进 SEO 和性能</p>
</li>
<li><p>易于测试</p>
</li>
<li><p>React 只关注 View 层，所以可以和其它任何框架(如Backbone.js, Angular.js)一起使用</p>
</li>
</ul>
<h3 id="虚拟DOM"><a href="#虚拟DOM" class="headerlink" title="虚拟DOM"></a>虚拟DOM</h3><p>在浏览器端用<code>Javascript</code>实现的一套<code>DOM API</code></p>
<h3 id="为什么虚拟DOM会提高性能"><a href="#为什么虚拟DOM会提高性能" class="headerlink" title="为什么虚拟DOM会提高性能"></a>为什么虚拟DOM会提高性能</h3><p>虚拟dom相当于在js和真实dom中间加了一个缓存，利用dom diff算法避免了没有必要的dom操作，从而提高性能。</p>
<p>具体实现步骤如下：</p>
<ol>
<li><p>用 JavaScript 对象结构表示 DOM 树的结构；然后用这个树构建一个真正的 DOM 树，插到文档当中；</p>
</li>
<li><p>当状态变更的时候，重新构造一棵新的对象树。然后用新的树和旧的树进行比较，记录两棵树差异；</p>
</li>
<li><p>将步骤2所记录的差异应用到步骤1所构建的真正的DOM树上，视图就更新了。</p>
</li>
</ol>
<h3 id="Diff算法"><a href="#Diff算法" class="headerlink" title="Diff算法"></a>Diff算法</h3><ol>
<li><p>把树形结构按照层级分解，只比较同级元素。</p>
</li>
<li><p>给列表结构的每个单元添加唯一的key属性，方便比较。</p>
</li>
<li><p>React 只会匹配相同 class 的 component（这里面的class指的是组件的名字）</p>
</li>
<li><p>合并操作，调用 component 的 setState 方法的时候, React 将其标记为 dirty.</p>
</li>
<li><p>到每一个事件循环结束, React 检查所有标记 dirty 的 component 重新绘制.</p>
</li>
<li><p>选择性子树渲染。开发人员可以重写shouldComponentUpdate提高diff的性能。</p>
</li>
</ol>
<h3 id="React生命周期函数"><a href="#React生命周期函数" class="headerlink" title="React生命周期函数"></a>React生命周期函数</h3><p><strong>初始化阶段</strong></p>
<ul>
<li><code>getDefaultProps</code>：获取实例的默认属性</li>
<li><code>getInitialState</code>：获取每个实例的初始化状态</li>
<li><code>componentWillMount</code>：组件即将被装载、渲染到页面上</li>
<li><code>render</code>：组件在这里生成虚拟的DOM节点</li>
<li><code>componentDidMount</code>：组件真正在被装载之后</li>
</ul>
<p><strong>运行中状态</strong></p>
<ul>
<li><p><code>componentWillReceiveProps</code>：组件将要接收到属性的时候调用</p>
</li>
<li><p><code>shouldComponentUpdate</code>：组件接受到新属性或者新状态的时候（可以返回false，接收数据后不更新，阻止render调用，后面的函数不会被继续执行了）</p>
</li>
<li><p><code>componentWillUpdate</code>：组件即将更新不能修改属性和状态</p>
</li>
<li><p><code>render</code>：组件重新描绘</p>
</li>
<li><p><code>componentDidUpdate</code>：组件已经更新</p>
</li>
</ul>
<p><strong>销毁阶段</strong></p>
<ul>
<li><code>componentWillUnmount</code>：组件即将销毁 </li>
</ul>
<h3 id="React性能优化方案"><a href="#React性能优化方案" class="headerlink" title="React性能优化方案"></a>React性能优化方案</h3><ul>
<li><p>重写shouldComponentUpdate来避免不必要的dom操作。</p>
</li>
<li><p>使用 production 版本的react.js。</p>
</li>
<li><p>使用key来帮助React识别列表中所有子组件的最小变化</p>
</li>
</ul>
<h3 id="React的-shouldComponentUpdate函数"><a href="#React的-shouldComponentUpdate函数" class="headerlink" title="React的 shouldComponentUpdate函数"></a>React的 shouldComponentUpdate函数</h3><p> React虚拟dom技术要求不断的将dom和虚拟dom进行diff比较，如果dom树比较大，这种比较操作会比较耗时，因此React提供了shouldComponentUpdate这种补丁函数，如果对于一些变化，如果我们不希望某个组件刷新，或者刷新后跟原来其实一样，就可以使用这个函数直接告诉React，省去diff操作，进一步的提高了效率。 </p>
<h3 id="组件的-状态-state-和属性-props-之间有何不同？"><a href="#组件的-状态-state-和属性-props-之间有何不同？" class="headerlink" title="(组件的)状态(state)和属性(props)之间有何不同？"></a>(组件的)状态(state)和属性(props)之间有何不同？</h3><ul>
<li><p>State 是一种数据结构，用于组件挂载时所需数据的默认值。State 可能会随着时间的推移而发生突变，但多数时候是作为用户事件行为的结果。</p>
</li>
<li><p>Props(properties 的简写)则是组件的配置。props 由父组件传递给子组件，并且就子组件而言，props 是不可变的(immutable)。组件不能改变自身的 props，但是可以把其子组件的 props 放在一起(统一管理)。Props 也不仅仅是数据–回调函数也可以通过 props 传递。</p>
</li>
</ul>
<h3 id="当渲染一个列表时，何为-key？设置-key-的目的是什么？"><a href="#当渲染一个列表时，何为-key？设置-key-的目的是什么？" class="headerlink" title="当渲染一个列表时，何为 key？设置 key 的目的是什么？"></a>当渲染一个列表时，何为 key？设置 key 的目的是什么？</h3><p> Keys 会有助于 React 识别哪些 items 改变了，被添加了或者被移除了。Keys 应该被赋予数组内的元素以赋予(DOM)元素一个稳定的标识，选择一个 key 的最佳方法是使用一个字符串，该字符串能惟一地标识一个列表项。很多时候你会使用数据中的 IDs 作为 keys，当你没有稳定的 IDs 用于被渲染的 items 时，可以使用项目索引作为渲染项的 key，但这种方式并不推荐，如果 items 可以重新排序，就会导致 re-render 变慢 </p>
<h3 id="在构造函数中-调用-super-props-的目的是什么？"><a href="#在构造函数中-调用-super-props-的目的是什么？" class="headerlink" title="(在构造函数中)调用 super(props) 的目的是什么？"></a>(在构造函数中)调用 super(props) 的目的是什么？</h3><p> 在 super() 被调用之前，子类是不能使用 this 的，在 ES2015 中，子类必须在 constructor 中调用 super()。传递 props 给 super() 的原因则是便于(在子类中)能在 constructor 访问 this.props。 </p>
<h3 id="何为-JSX-？"><a href="#何为-JSX-？" class="headerlink" title="何为 JSX ？"></a>何为 JSX ？</h3><p> JSX 是 JavaScript 语法的一种语法扩展，并拥有 JavaScript 的全部功能。JSX 生产 React “元素”，你可以将任何的 JavaScript 表达式封装在花括号里，然后将其嵌入到 JSX 中。在编译完成之后，JSX 表达式就变成了常规的 JavaScript 对象，这意味着你可以在 if 语句和 for 循环内部使用 JSX，将它赋值给变量，接受它作为参数，并从函数中返回它。 </p>
<h2 id="VUE"><a href="#VUE" class="headerlink" title="VUE"></a>VUE</h2><h3 id="对于Vue的理解"><a href="#对于Vue的理解" class="headerlink" title="对于Vue的理解"></a>对于Vue的理解</h3><p>Vue可能有些方面是不如React，不如Angular，但它是渐进的，没有强主张，你可以在原有大系统的上面，把一两个组件改用它实现，当jQuery用；也可以整个用它全家桶开发，当Angular用；还可以用它的视图，搭配你自己设计的整个下层用。你可以在底层数据逻辑的地方用OO和设计模式的那套理念，也可以函数式，都可以，它只是个轻量视图而已，只做了自己该做的事，没有做不该做的事，仅此而已。</p>
<h3 id="vue-js的两个核心是什么？"><a href="#vue-js的两个核心是什么？" class="headerlink" title="vue.js的两个核心是什么？"></a>vue.js的两个核心是什么？</h3><p> 数据驱动和组件化。 </p>
<h3 id="vue生命周期钩子函数有哪些？"><a href="#vue生命周期钩子函数有哪些？" class="headerlink" title="vue生命周期钩子函数有哪些？"></a>vue生命周期钩子函数有哪些？</h3><p> 总共分为8个阶段创建前/后，载入前/后，更新前/后，销毁前/后。具体执行流程查看下图。 </p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21309003-59d002129320a1f5?imageMogr2/auto-orient/strip%7CimageView2/2/w/580/format/webp" alt="img"></p>
<h3 id="vue-的双向绑定的原理是什么？"><a href="#vue-的双向绑定的原理是什么？" class="headerlink" title="vue 的双向绑定的原理是什么？"></a>vue 的双向绑定的原理是什么？</h3><p> vue数据双向绑定是通过数据劫持结合发布者-订阅者模式的方式来实现的。具体实现过程： </p>
<ol>
<li><p>实现一个监听器Observer，用来劫持并监听所有属性，如果有变动的，就通知订阅者。</p>
</li>
<li><p>实现一个订阅者Watcher，可以收到属性的变化通知并执行相应的函数，从而更新视图。</p>
</li>
<li><p>实现一个解析器Compile，可以扫描和解析每个节点的相关指令，并根据初始化模板数据以及初始化相应的订阅器。</p>
</li>
</ol>
<p>流程图如下：</p>
<p> <img src="https://upload-images.jianshu.io/upload_images/21309003-a088ac596b84d472?imageMogr2/auto-orient/strip%7CimageView2/2/w/785/format/webp" alt="img"></p>
<h3 id="请问v-if和v-show有什么区别？"><a href="#请问v-if和v-show有什么区别？" class="headerlink" title="请问v-if和v-show有什么区别？"></a>请问v-if和v-show有什么区别？</h3><p>相同点： 两者都是在判断DOM节点是否要显示。</p>
<p>不同点：</p>
<ul>
<li><p>实现方式： v-if是根据后面数据的真假值判断直接从Dom树上删除或重建元素节点。 v-show只是在修改元素的css样式，也就是display的属性值，元素始终在Dom树上。</p>
</li>
<li><p>编译过程：v-if切换有一个局部编译/卸载的过程，切换过程中合适地销毁和重建内部的事件监听和子组件； v-show只是简单的基于css切换；</p>
</li>
<li><p>编译条件：v-if是惰性的，如果初始条件为假，则什么也不做；只有在条件第一次变为真时才开始局部编译； v-show是在任何条件下（首次条件是否为真）都被编译，然后被缓存，而且DOM元素始终被保留；</p>
</li>
<li><p>性能消耗：v-if有更高的切换消耗，不适合做频繁的切换； v-show有更高的初始渲染消耗，适合做频繁的额切换；</p>
</li>
</ul>
<h3 id="v-on可以监听多个方法吗？"><a href="#v-on可以监听多个方法吗？" class="headerlink" title="v-on可以监听多个方法吗？"></a>v-on可以监听多个方法吗？</h3><p>可以</p>
<h3 id="vue中key值的作用"><a href="#vue中key值的作用" class="headerlink" title="vue中key值的作用"></a>vue中key值的作用</h3><p>使用key来给每个节点做一个唯一标识</p>
<p><strong>key的作用主要是为了高效的更新虚拟DOM</strong>。另外vue中在使用相同标签名元素的过渡切换时，也会使用到key属性，其目的也是为了让vue可以区分它们，否则vue只会替换其内部属性而不会触发过渡效果</p>
<h3 id="Vue-组件中-data-为什么必须是函数？"><a href="#Vue-组件中-data-为什么必须是函数？" class="headerlink" title="Vue 组件中 data 为什么必须是函数？"></a>Vue 组件中 data 为什么必须是函数？</h3><p>在new Vue()中，data是可以作为一个对象进行操作的，然而在component中，data只能以函数的形式存在，不能直接将对象赋值给它。</p>
<p>当data选项是一个函数的时候，每个实例可以维护一份被返回对象的独立的拷贝，这样各个实例中的data不会相互影响，是独立的。</p>
<h3 id="v-for-与-v-if-的优先级"><a href="#v-for-与-v-if-的优先级" class="headerlink" title="v-for 与 v-if 的优先级"></a>v-for 与 v-if 的优先级</h3><p> v-for的优先级比v-if高 </p>
<h3 id="说出至少-4-种-vue-当中的指令和它的用法"><a href="#说出至少-4-种-vue-当中的指令和它的用法" class="headerlink" title="说出至少 4 种 vue 当中的指令和它的用法"></a>说出至少 4 种 vue 当中的指令和它的用法</h3><p> v-if(判断是否隐藏)</p>
<p> v-for(把数据遍历出来)</p>
<p> v-bind(绑定属性)</p>
<p> v-model(实现双向绑定)</p>
<h3 id="vue中子组件调用父组件的方法"><a href="#vue中子组件调用父组件的方法" class="headerlink" title="vue中子组件调用父组件的方法"></a>vue中子组件调用父组件的方法</h3><p>第一种方法是直接在子组件中通过this.$parent.event来调用父组件的方法。</p>
<p>第二种方法是在子组件里用$emit向父组件触发一个事件，父组件监听这个事件就行了。</p>
<p>第三种是父组件把方法传入子组件中，在子组件里直接调用这个方法。</p>
<h3 id="vue中父组件调用子组件的方法"><a href="#vue中父组件调用子组件的方法" class="headerlink" title="vue中父组件调用子组件的方法"></a>vue中父组件调用子组件的方法</h3><p>父组件利用ref属性操作子组件方法。</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 父</span></span><br><span class="line">&lt;child ref=<span class="string">"childMethod"</span>&gt;&lt;<span class="regexp">/child&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/ 子</span></span><br><span class="line"><span class="regexp">method: &#123;</span></span><br><span class="line"><span class="regexp">  test() &#123;</span></span><br><span class="line"><span class="regexp">    alert(1)</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure>

<p>在父组件里调用test即 this.$refs.childMethod.test()</p>
<h3 id="vue组件之间传值-未完成"><a href="#vue组件之间传值-未完成" class="headerlink" title="vue组件之间传值(未完成)"></a>vue组件之间传值(未完成)</h3><h3 id="怎么定义vue-router的动态路由？怎么获取传过来的值？"><a href="#怎么定义vue-router的动态路由？怎么获取传过来的值？" class="headerlink" title="怎么定义vue-router的动态路由？怎么获取传过来的值？"></a>怎么定义vue-router的动态路由？怎么获取传过来的值？</h3><p> 动态路由的创建，主要是使用path属性过程中，使用动态路径参数，以冒号开头，如下： </p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    path: <span class="string">'/details/:id'</span></span><br><span class="line">    name: <span class="string">'Details'</span></span><br><span class="line">    components: Details</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>访问details目录下的所有文件，如果details/a，details/b等，都会映射到Details组件上。</p>
<p>当匹配到/details下的路由时，参数值会被设置到this.$route.params下，所以通过这个属性可以获取动态参数this.$route.params.id</p>
<h3 id="vue-router有哪几种路由守卫"><a href="#vue-router有哪几种路由守卫" class="headerlink" title="vue-router有哪几种路由守卫?"></a>vue-router有哪几种路由守卫?</h3><p>路由守卫为：</p>
<p>全局守卫：beforeEach</p>
<p>后置守卫：afterEach</p>
<p>全局解析守卫：beforeResolve</p>
<p>路由独享守卫：beforeEnter</p>
<h3 id="route和-router的区别是什么？"><a href="#route和-router的区别是什么？" class="headerlink" title="$route和 $router的区别是什么？"></a>$route和 $router的区别是什么？</h3><p>$router为VueRouter的实例，是一个全局路由对象，包含了路由跳转的方法、钩子函数等。</p>
<p>$route 是路由信息对象||跳转的路由对象，每一个路由都会有一个route对象，是一个局部对象，包含path,params,hash,query,fullPath,matched,name等路由信息参数。</p>
<h3 id="vue-router响应路由参数的变化"><a href="#vue-router响应路由参数的变化" class="headerlink" title="vue-router响应路由参数的变化"></a>vue-router响应路由参数的变化</h3><p>用<code>watch</code>检测</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">    $route(to, <span class="keyword">from</span>)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(to.path);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>组件内导航钩子函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">beforeRouteUpdate(to, <span class="keyword">from</span>, next)&#123;</span><br><span class="line">    <span class="comment">// to do somethings</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="vue-router-传参-（未完成）"><a href="#vue-router-传参-（未完成）" class="headerlink" title="vue-router 传参 （未完成）"></a>vue-router 传参 （未完成）</h3><ul>
<li>使用Params</li>
</ul>
<h2 id="jQuery（未完成）"><a href="#jQuery（未完成）" class="headerlink" title="jQuery（未完成）"></a>jQuery（未完成）</h2><ul>
<li>原因：<code>jQuery</code>是为了改变<code>javascript</code>的编码方式而设计的。</li>
<li>原理：<ul>
<li><code>jQuery</code>采用的是构造函数模式进行开发的,jQuery是一个类</li>
<li><code>jQuery</code>的常用方法(CSS、属性、筛选、事件、动画、文档处理)都是定义在<code>jQuery.prototype</code>上的 -&gt;只有<code>jQuery</code>的实例才能使用这些方法</li>
</ul>
</li>
<li>核心：<code>jQuery</code>不仅仅是一个类(在它的原型上定义了很多的方法，每一个<code>jQuery</code>的实例都可以使用这些方法)，它还是一个普通的对象，在<code>jQuery</code>本身的属性中还增加了一系列的方法:<code>Ajax</code>、<code>each</code>、工具</li>
</ul>
<h2 id="AngularJS（未完成）"><a href="#AngularJS（未完成）" class="headerlink" title="AngularJS（未完成）"></a>AngularJS（未完成）</h2><h2 id="node（未完成）"><a href="#node（未完成）" class="headerlink" title="node（未完成）"></a>node（未完成）</h2><ul>
<li>定义：<code>Node</code>既不是一种语言，也不是一个框架，而是一个能执行<code>JavaScript</code>代码的运行时环境。</li>
</ul>
<h2 id="webpack（未完成）"><a href="#webpack（未完成）" class="headerlink" title="webpack（未完成）"></a>webpack（未完成）</h2><p><code>WebPack</code>是一个模块打包工具，可以使用<code>WebPack</code>管理模块依赖，并编绎输出模块们所需的静态文件。它能够很好地管理、打包<code>Web</code>开发中所用到的<code>HTML</code>、<code>Javascript</code> 、<code>CSS</code>以及各种静态文件（图片、字体等），让开发过程更加高效。对于不同类型的资源， <code>webpack</code>有对应的模块加载器。 <code>webpack</code>模块打包器会分析模块间的依赖关系，最后生成了优化且合并后的静态资源</p>
<h1 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h1><h2 id="垃圾回收机制"><a href="#垃圾回收机制" class="headerlink" title="垃圾回收机制"></a>垃圾回收机制</h2><p><strong>JavaScript 具有自动垃圾收集机制，就是找出那些不再继续使用的变量，然后释放其占用的内存。为此，垃圾收集器会按照固定的时间间隔（或代码执行中预定的收集时间）。常用的的方法有两种，即<code>标记清除</code>和<code>引用计数</code></strong></p>
<h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><ul>
<li>原理：一个对象不被其他对象引用时会被回收</li>
<li>问题：循环引用无法回收</li>
</ul>
<h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><ul>
<li>原理：从根元素（window对象）开始，周期性的标记可被访问的对象，同时回收不可被访问的对象</li>
<li>问题：收集垃圾时程序会等待，且回收后的内容空间不连续。于是出现了<strong>标记-整理</strong>机制，即回收后会整理内存空间，但效率又会降低一些</li>
</ul>
<h3 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h3><ul>
<li><p><strong>内存泄漏是指一块被分配的内存既不能使用，又不能回收，直到浏览器进程结束。</strong></p>
</li>
<li><p><strong>闭包不会引起内存泄露</strong>：由于IE9 之前的版本对JS对象和DOM对象使用不同的垃圾收集，从而导致内存无法进行回收。</p>
</li>
<li><p>什么操作会引起内存泄露：</p>
<ul>
<li><p>意外的全局变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">leaks</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	leak = <span class="string">'xxxx'</span>;   <span class="comment">// 等价于 window.leak = 'xxxx';</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 或者由this创建的意外的全局变量</span></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">leaks</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.leak = <span class="string">'xxxx'</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// leaks()调用自己，this指向window，而不是undefined</span></span><br><span class="line">  leaks();</span><br></pre></td></tr></table></figure>

<p><strong><em>解决方案：</em></strong>在js文件头部加上’use strict’可以避免此类错误的发生</p>
</li>
<li><p>被遗忘的计时器或回调函数</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> someResource = getData();</span><br><span class="line">setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> node = <span class="built_in">document</span>.getElementById(<span class="string">'node'</span>);</span><br><span class="line">    <span class="keyword">if</span>(node)&#123;</span><br><span class="line">        <span class="comment">// 处理node</span></span><br><span class="line">        node.innerHTML = <span class="built_in">JSON</span>.stringify(someResource);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p>如果后续<code>node</code>元素被删除，整个计时器其实没有任何作用。但如果没有回收定时器，整个定时器依然有效，不但定时器无法被内存回收，定时器中的依赖也无法被回收。</p>
</li>
<li><p>DOM引用</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> elements = &#123; </span><br><span class="line">    image: <span class="built_in">document</span>.getElementById(<span class="string">'image'</span>)&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">doStuff</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        elements.image.src = <span class="string">'http://example.com/image_name.png'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="keyword">function</span> <span class="title">removeImage</span>(<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="built_in">document</span>.body.removeChild(<span class="built_in">document</span>.getElementById(<span class="string">'image'</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p> 即使我们对于 image 元素进行了移除，但是仍然有对 image 元素的引用，依然无法对其进行内存回收。 </p>
</li>
<li><p>闭包</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> theThing = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> replaceThing = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">	<span class="keyword">var</span> originalThing = theThing; </span><br><span class="line">    <span class="keyword">var</span> unused = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">        <span class="keyword">if</span> (originalThing) </span><br><span class="line">            <span class="comment">// 对于 'originalThing'的引用 </span></span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"hi"</span>); </span><br><span class="line">    &#125;; </span><br><span class="line">    theThing = &#123; </span><br><span class="line">        longStr: <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">1000000</span>).join(<span class="string">'*'</span>), </span><br><span class="line">        someMethod: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; </span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"message"</span>); </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">setInterval(replaceThing, <span class="number">1000</span>);</span><br></pre></td></tr></table></figure>

<p> 这段代码，每次调用<code>replaceThing</code>时，<code>theThing</code>获得了包含一个巨大的数组和一个对于新闭包<code>someMethod</code>的对象。同时<code>unused</code>是一个引用了<code>originalThing</code>的闭包。 </p>
<p> 这个范例的关键在于，闭包之间是共享作用域的，尽管<code>unused</code>可能一直没有被调用，但是<code>someMethod</code>可能会被调用，就会导致无法对其内存进行回收。 当这段代码被反复执行时，内存会持续增长。 </p>
</li>
</ul>
</li>
</ul>
<h2 id="浏览器存储机制"><a href="#浏览器存储机制" class="headerlink" title="浏览器存储机制"></a>浏览器存储机制</h2><h3 id="浏览器存储方式"><a href="#浏览器存储方式" class="headerlink" title="浏览器存储方式"></a>浏览器存储方式</h3><ul>
<li><p>存储方式：<code>cookie</code>、<code>localStorage</code>、<code>sessionStorage</code>、<code>indexDB</code></p>
</li>
<li><p>区别如下表：</p>
<table>
<thead>
<tr>
<th align="center">特征</th>
<th align="center">cookie</th>
<th align="center">localStorage</th>
<th align="center">sessionStorage</th>
<th align="center">indexDB</th>
</tr>
</thead>
<tbody><tr>
<td align="center">数据生命周期</td>
<td align="center">一般由服务器生成，可设置过期时间</td>
<td align="center">除非被清理，否则一直存在</td>
<td align="center">页面关闭就清理</td>
<td align="center">除非被清理，否则一直存在</td>
</tr>
<tr>
<td align="center">数据存储大小</td>
<td align="center">4K</td>
<td align="center">5M</td>
<td align="center">5M</td>
<td align="center">无限</td>
</tr>
<tr>
<td align="center">与服务端通信</td>
<td align="center">每次请求都会携带在header中</td>
<td align="center">不参与</td>
<td align="center">不参与</td>
<td align="center">不参与</td>
</tr>
</tbody></table>
</li>
<li><p>如果处于性能考虑，如果没有大量数据存储要求的话，可以使用<code>localStorage</code>和<code>sessionStorage</code>。对于不怎么改变的数据尽量使用<code>localStorage</code>存储，否则可以用<code>sessionStorage</code>存储。</p>
</li>
</ul>
<h3 id="cookie的属性和使用"><a href="#cookie的属性和使用" class="headerlink" title="cookie的属性和使用"></a>cookie的属性和使用</h3><ul>
<li>属性及作用如下表所示：</li>
</ul>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">作用</th>
</tr>
</thead>
<tbody><tr>
<td align="center">value</td>
<td align="center">如果用于保存用户登录态，应该将该值加密，不能使用明文的用户标识</td>
</tr>
<tr>
<td align="center">http-only</td>
<td align="center">不能通过<code>js</code>访问<code>cookie</code>，减少<code>XSS</code>攻击</td>
</tr>
<tr>
<td align="center">secure</td>
<td align="center">只能在协议为<code>HTTPS</code>的请求中携带</td>
</tr>
<tr>
<td align="center">same-site</td>
<td align="center">规定浏览器不能在跨域请求中携带<code>Cookie</code>，减少<code>CSRF</code>攻击</td>
</tr>
</tbody></table>
<ul>
<li><p>使用：<code>cookie</code>的各种参数用字符串拼接，最后保存到一个变量中，用<code>document.cookie</code>设置</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie = cookie</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="浏览器缓存机制"><a href="#浏览器缓存机制" class="headerlink" title="浏览器缓存机制"></a>浏览器缓存机制</h2><p>缓存是浏览器性能优化中简单高效的一种方式，可以<strong>显著减少网络传输带来的损耗</strong></p>
<h3 id="缓存位置"><a href="#缓存位置" class="headerlink" title="缓存位置"></a>缓存位置</h3><p>缓存从位置上来说可以分为四种，并且有各自的优先级。<strong>当多次查找缓存都没有命中的时候，才会请求网络</strong>。顺序是：</p>
<ol>
<li>Service Worker</li>
<li>Memory Cache</li>
<li>Disk Cache</li>
<li>Push Cache</li>
<li>网络请求</li>
</ol>
<h4 id="Service-Worker"><a href="#Service-Worker" class="headerlink" title="Service Worker"></a>Service Worker</h4><p>它的缓存机制与浏览器其它内建缓存机制不同，它可以让我们自由控制缓存哪些文件、如何匹配缓存、如何读取缓存，并且是连续性的</p>
<p>当Service Worker没有命中缓存的时候，会根据缓存优先级去查找数据。但是<strong>不管我们是从Memory Cache中还是从网络请求中获取的数据，浏览器都会显示我们是从Service Worker中获取的内容</strong></p>
<h4 id="Memory-Cache"><a href="#Memory-Cache" class="headerlink" title="Memory Cache"></a>Memory Cache</h4><p>存储在内存中的缓存，读取内存中数据速度比磁盘快。<strong>虽然效率高，但是缓存持续性很短，会随着进程的释放而释放。</strong>一旦我们关闭tab页面，内存中的缓存也就被释放了</p>
<h4 id="Disk-Cache"><a href="#Disk-Cache" class="headerlink" title="Disk Cache"></a>Disk Cache</h4><p>存储在硬盘上的缓存。与Memory Cache相比，速度会慢一些，但是胜在容量和存储时效性上</p>
<p>在所有浏览器缓存中，Disk Cache 覆盖面积是最大的。它会根据HTTP Header中的字段判断哪些资源需要缓存，哪些资源可以不请求直接使用，哪些资源已经过期需要重新请求。并且即使在跨站点的情况下，相同地址的资源一旦被硬盘缓存下来，就不会再次去请求数据</p>
<h4 id="Push-Cache"><a href="#Push-Cache" class="headerlink" title="Push Cache"></a>Push Cache</h4><p>是HTTP/2 中的内容，当以上三种缓存都没有命中时才会被使用。并且缓存时间也很短暂，只在会话（Session）中存在，一旦会话结束就会被释放</p>
<h4 id="网络请求"><a href="#网络请求" class="headerlink" title="网络请求"></a>网络请求</h4><p>如果所有缓存都没有命中的话，就会发起请求来获取资源</p>
<h3 id="缓存策略"><a href="#缓存策略" class="headerlink" title="缓存策略"></a>缓存策略</h3><p><strong>强值缓存</strong></p>
<ul>
<li>Expires：HTTP1.0中的内容。受限于本地时间，如果修改了本地时间，可能会造成缓存失效</li>
<li>Cache-control：HTTP1.1中的内容，优先级比Expires高，可以在请求头或者响应头中设置</li>
</ul>
<p><strong>协商缓存</strong>（比较缓存）</p>
<ul>
<li><p>Last-Modified和If-Midified-Since</p>
<ul>
<li>原理：Last-Modified 表示资源的最后修改日期，If-Modified-Since会将Last-Modified的值发送给服务器，询问服务器在该日期后资源是否有更新，有更新的话会将新的资源发送回来，否则返回304状态码</li>
<li>缺点：1. 如果本地打开缓存文件，即使没有对文件进行修改，但还是会造成Last-Modified被修改。2. Last-Modified只能以秒计时，如果在不可感知的时间内修改完成文件，那么服务端会认为资源还是命中了，不会返回正确资源</li>
</ul>
</li>
<li><p>ETag和If-None-Match</p>
<p>ETag类似于文件指纹，If-None-Match会将当前ETag发送给服务器，询问该资源ETag是否变动，有变动的话就将新的资源发送回来。并且ETag的优先级比Last-Modified要高</p>
</li>
</ul>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p><strong>强制缓存</strong>：服务器通知浏览器一个缓存时间，在缓存时间内，下次请求直接用缓存，不在时间内，执行协商缓存策略</p>
<p><strong>协商缓存</strong>：将缓存信息的Etag和Last-Modified通过请求发送给服务器，有服务器校验，返回304状态码时，浏览器直接用缓存</p>
<h2 id="浏览器渲染机制"><a href="#浏览器渲染机制" class="headerlink" title="浏览器渲染机制"></a>浏览器渲染机制</h2><h3 id="渲染机制"><a href="#渲染机制" class="headerlink" title="渲染机制"></a>渲染机制</h3><ol>
<li><p>创建DOM树：用HTML分析器，分析HTML元素，构建一棵DOM树</p>
</li>
<li><p>创建Style Rules：用CSS分析器，分析CSS文件和元素上的inline样式，生成页面样式表</p>
</li>
<li><p>构建render树：将上面的DOM树和样式表关联起来，生成一棵Render树。这一过程又叫Attachment。每个DOM节点都有attach方法，接受样式信息，返回一个render对象（又叫renderer）。这些render对象最终被构建成一棵render树</p>
</li>
<li><p>布局Layout：浏览器为每个render树上的节点确定一个在显示屏上出现的精确坐标</p>
</li>
<li><p>绘制painting：调用paint方法，显示在显示屏上</p>
</li>
</ol>
<h3 id="什么情况会阻塞渲染"><a href="#什么情况会阻塞渲染" class="headerlink" title="什么情况会阻塞渲染"></a>什么情况会阻塞渲染</h3><ul>
<li><p>渲染的前提是生成渲染树，所以HTML和CSS肯定会阻塞渲染</p>
<p>想渲染的越快，越应该降低一开始需要渲染的大小，并且做到HTML扁平层级，优化CSS选择器</p>
</li>
<li><p>一般当浏览器解析到<code>script</code>标签时会暂停构建DOM，完成后才会从暂停的地方重新开始</p>
<p>建议将<code>script</code>标签放在<code>body</code>标签底部</p>
</li>
</ul>
<h3 id="script标签一定会阻塞渲染吗"><a href="#script标签一定会阻塞渲染吗" class="headerlink" title="script标签一定会阻塞渲染吗"></a>script标签一定会阻塞渲染吗</h3><p><strong>不一定</strong></p>
<ul>
<li><p>将<code>script</code>标签放在<code>body</code>标签底部</p>
</li>
<li><p><code>defer</code>属性：加载后续文档元素的过程将和<code>js</code>文件的<strong><em>加载</em></strong>并行进行，但是<code>js</code>的执行要在素有元素解析完成之后，<code>DOMContentLoaded</code>事件触发之前进行。</p>
</li>
<li><p><code>aysnc</code>属性：加载和渲染后序文档的过程将和<code>js</code>的<strong><em>加载与执行</em></strong>并行进行</p>
</li>
</ul>
<h3 id="重绘和回流"><a href="#重绘和回流" class="headerlink" title="重绘和回流"></a>重绘和回流</h3><ul>
<li>重绘：当一个元素自身的宽高，布局，及显示或隐藏没有改变，而只是改变了元素的外观风格的时候，就产生了重绘</li>
<li>回流：当渲染树的一部分或者全部元素因改变了自身的宽高，布局，显示或隐藏，或元素内部的文字结构发生变化，导致需要重新构建页面的时候，就产生了回流</li>
</ul>
<p><strong>回流必定会发生重绘，重绘不一定会引发回流</strong></p>
<h4 id="那些问题可能会导致重绘和回流"><a href="#那些问题可能会导致重绘和回流" class="headerlink" title="那些问题可能会导致重绘和回流"></a>那些问题可能会导致重绘和回流</h4><ul>
<li>改变window大小</li>
<li>改变字体</li>
<li>改变字体</li>
<li>添加和删除样式</li>
<li>文字改变</li>
<li>定位或者浮动</li>
<li>盒模型</li>
</ul>
<h4 id="如何减少重绘和回流"><a href="#如何减少重绘和回流" class="headerlink" title="如何减少重绘和回流"></a>如何减少重绘和回流</h4><ul>
<li>用transform 代替 top，left ，margin-top， margin-left… 这些位移属性</li>
<li>使用 visibility 替换 display: none ，因为前者只会引起重绘，后者会引发回流</li>
<li>不要使用 js 代码对dom 元素设置多条样式，选择用一个 className 代替之。如果确实需要用 js 对 dom 设置多条样式那么可以将这个dom 先隐藏，然后再对其设置</li>
<li>不要在循环内获取dom 的样式例如：offsetWidth, offsetHeight, clientWidth, clientHeight… 这些</li>
<li>不要使用table 布局，因为table 的每一个行甚至每一个单元格的样式更新都会导致整个table 重新布局</li>
<li>对于频繁变化的元素应该为其加一个 transform 属性，对于视频使用video 标签</li>
<li>必要时可以开启 GPU 加速，但是不能滥用</li>
</ul>
<h2 id="浏览器性能优化"><a href="#浏览器性能优化" class="headerlink" title="浏览器性能优化"></a>浏览器性能优化</h2><h3 id="DOMContentLoad和Load"><a href="#DOMContentLoad和Load" class="headerlink" title="DOMContentLoad和Load"></a>DOMContentLoad和Load</h3><ul>
<li><code>DOMContentLoad</code>：事件触发时，仅当DOM加载完成，不包括样式表、图片</li>
<li><code>Load</code>：事件触发时，页面上的所有的DOM、样式表、脚本、图片都已加载完成</li>
</ul>
<h3 id="为什么CSS要放在head里面"><a href="#为什么CSS要放在head里面" class="headerlink" title="为什么CSS要放在head里面"></a>为什么CSS要放在head里面</h3><ul>
<li>构建render树需要DOM和CSSOM（style rules），所以HTML和CSS都会阻塞渲染，所以需要CSS尽早加载以缩短首次渲染的时间</li>
<li>由于CSS不会阻塞文档解析，但是会阻塞文档渲染。把CSS放在头部可以先生成CSSOM树，后续渲染DOM的时候，可以一次性构建Render树；如果把CSS放在后面，会先解析一次DOM，加载CSS之后，会重新渲染之前的DOM，需要两次渲染</li>
</ul>
<h3 id="为什么JS要放在body标签底部"><a href="#为什么JS要放在body标签底部" class="headerlink" title="为什么JS要放在body标签底部"></a>为什么JS要放在body标签底部</h3><ul>
<li>阻塞浏览器的解析。也就是说发现另一个脚本时，需等待脚本下载完成并执行完成后才会继续解析HTML</li>
<li>普通的脚本会阻塞浏览器解析，加上<code>defer</code>或<code>async</code>属性，脚本就会变成异步</li>
<li>执行<code>JS</code>代码过长会卡住渲染，对于需要很多时间计算的代码可以考虑用<code>Web Worker</code>，它可以让我们另开一个线程执行脚本，不影响渲染</li>
</ul>
<h3 id="白屏-首屏"><a href="#白屏-首屏" class="headerlink" title="白屏 首屏"></a>白屏 首屏</h3><ul>
<li><p>白屏</p>
<ul>
<li><p>浏览器开始显示内容的时间，一般认为浏览器开始渲染<code>body</code>或者解析完<code>head</code>标签的时候是白屏结束的时间</p>
</li>
<li><p>计算方法：</p>
<ol>
<li><p>IE8：title后输出一个时间<code>pagestarttime</code></p>
</li>
<li><p>head结束前输出一个时间<code>firstpaint</code></p>
<p>白屏时间 = firstpaint - pagestarttime / performance.timing.navigationstart</p>
</li>
</ol>
</li>
<li><p>优化：</p>
<ul>
<li>加快<code>JS</code>执行速度，比如无限滚动的页面，可以先用<code>JS</code>渲染一个屏幕范围内的东西</li>
<li>减少文件体积</li>
<li>首屏同步渲染html，后序的滚屏再异步加载和渲染</li>
</ul>
</li>
</ul>
</li>
<li><p>首屏</p>
<ul>
<li>用户打开网站开始，到浏览器首屏内容渲染完成的时间</li>
<li>计算方法：<ul>
<li>模块标签标记：适用于内容不需要拉取数据才能生存以及页面不考虑图片等资源的加载情况。结束位置加时间戳输出时间</li>
<li>统计首屏内图片加载最慢时间。</li>
<li>自定义计算</li>
</ul>
</li>
<li>优化：<ul>
<li>首屏数据拉取逻辑放在顶部</li>
<li>首屏渲染CSS及JS逻辑优先内联html，返回时能立即执行</li>
<li>次屏逻辑延后执行</li>
</ul>
</li>
</ul>
</li>
<li><p>整页时间：整个页面加载完成时间。<code>loadEvntEnd-navigationStart/onload</code>记录时间戳</p>
</li>
</ul>
<h3 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h3><ul>
<li><p>防抖：将多次执行变为最后一次执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> debounce = <span class="function">(<span class="params">func, wait = <span class="number">50</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(timer) cleatTimeout(timer);</span><br><span class="line">        timer = setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">            func.apply(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125;, wait)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>节流：将多次操作变成每隔一段时间执行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">func, wait</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> last;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">...args</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">let</span> <span class="keyword">new</span> += <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">if</span>(!last || now &gt; last + wait)&#123;</span><br><span class="line">            last += now;</span><br><span class="line">            func.apply(<span class="keyword">this</span>, args);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="预渲染"><a href="#预渲染" class="headerlink" title="预渲染"></a>预渲染</h3><p>通过预渲染<strong>将下载的文件预先在后台渲染</strong>，可以使用以下代码开启预渲染</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"prerender"</span> <span class="attr">href</span>=<span class="string">"http;//example.com"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>预渲染虽然可以提高页面的加载速度，但是<strong>要确保该页面大概率会被用户在之后打开</strong>，否则就是白白浪费资源去渲染。</p>
<h3 id="懒执行"><a href="#懒执行" class="headerlink" title="懒执行"></a>懒执行</h3><p>懒执行是<strong>将某些逻辑延迟到使用时再计算</strong></p>
<p>该技术可以用于首屏优化，对于某些耗时且逻辑不需要在首屏就使用的，就可以使用懒执行</p>
<p>懒执行需要唤醒，一般可以通过定时器或者事件的调用来唤醒</p>
<h3 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h3><p>懒加载就是<strong>将不关键的资源延后加载</strong></p>
<p>懒加载的原理就是就是只加载自定义区域（通常是可执行区域，但也可以是即将进入可视区域）内需要加载的东西</p>
<p>对于图片来说，先设置图片标签<code>src</code>属性为一张占位图，将真实的图片放入一个自定义属性中，当进入自定义区域时，九江自定义属性替换为<code>src</code>属性，这样图片就会去下载资源，实现了图片的懒加载</p>
<p>懒加载不仅可以用于图片，也可以用在别的资源上，比如进入可视区域才开始播放视频等等</p>
<h3 id="CDN（Content-Delivery-Network，内容分发网络）"><a href="#CDN（Content-Delivery-Network，内容分发网络）" class="headerlink" title="CDN（Content Delivery Network，内容分发网络）"></a>CDN（Content Delivery Network，内容分发网络）</h3><p><code>CDN</code>的原理是尽可能的在各个地方分布机房缓存数据，这样即使我们的根服务器远在国外，在国内的用户也可以通过国内的机房迅速加载资源</p>
<h3 id="硬件加速"><a href="#硬件加速" class="headerlink" title="硬件加速"></a>硬件加速</h3><h4 id="让一个元素左移100px，使用left和transform有什么区别？"><a href="#让一个元素左移100px，使用left和transform有什么区别？" class="headerlink" title="让一个元素左移100px，使用left和transform有什么区别？"></a>让一个元素左移100px，使用left和transform有什么区别？</h4><p>使用left等属性来设置动画会一直触发浏览器的重绘，而使用CSS3中国的transform会采用GPU硬件加速，不触发重绘，性能更好</p>
<h4 id="硬件加速的原理"><a href="#硬件加速的原理" class="headerlink" title="硬件加速的原理"></a>硬件加速的原理</h4><p>DOM树和CSSOM合并后形成Render树。渲染树中包含了大量的渲染元素，每一个渲染元素会被分到一个图层中，每个图层又会被加载到GPU形成渲染纹理。GPU中的transform是不会触发重绘的，这一点非常类似3D绘图功能。最终这些使用tranform的图层都会由独立的合成器进程进行处理。</p>
<p>总结：</p>
<p><strong>CSS3 transform创建了一个新的复合图层，可以被GPU直接用来执行transform，从而不触发浏览器的重绘来达到加速的目的</strong></p>
<p>以下情况会创建一个独立的复合图层：</p>
<ul>
<li>3D或者CSS transform</li>
<li><videl> 和<canvas> 标签</li>
<li>CSS filters</li>
<li>元素覆盖时，比如用了z-index属性</li>
</ul>
<h4 id="如何硬件加速"><a href="#如何硬件加速" class="headerlink" title="如何硬件加速"></a>如何硬件加速</h4><p>以下CSS属性可以触发硬件加速：</p>
<ul>
<li>transform</li>
<li>opacity</li>
<li>filter</li>
<li>will-change:告知浏览器哪一个属性即将变化</li>
</ul>
<p>还可以通过transform的3D属性强制开始GPU加速使用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:translateZ(0)</span>;</span><br><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:rotateZ(360deg)</span>;</span><br></pre></td></tr></table></figure>

<h4 id="使用硬件加速的注意事项"><a href="#使用硬件加速的注意事项" class="headerlink" title="使用硬件加速的注意事项"></a>使用硬件加速的注意事项</h4><ul>
<li>不能让每个元素都启用硬件加速，这样会占用很大的内存，使页面有很强的卡顿感</li>
<li>GPU渲染会影响字体的抗锯齿效果，这是因为GPU和CPU具有不同的渲染机制，即使最终硬件加速停止了，文本还是会在动画期间显示得很模糊。</li>
</ul>
<h1 id="WEB安全"><a href="#WEB安全" class="headerlink" title="WEB安全"></a>WEB安全</h1><h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>通过把<code>SQL</code>命令插入到<code>WEB</code>表单递交或插入域名或页面请求的查询字符串，最终达到欺骗服务器执行恶意<code>SQL</code>的命令</p>
<h3 id="防范"><a href="#防范" class="headerlink" title="防范"></a>防范</h3><ul>
<li>永远不要信任用户的输入，要对用户的输入进行校验，可以通过正则表达式或者限制长度，对单双引号和’-‘进行转义</li>
<li>永远不要动态拼装<code>SQL</code>，可以使用参数化的<code>SQL</code>或者直接使用存储过程进行数据查询存取</li>
<li>永远不要使用管理员权限的数据库连接，为每个应用使用单独的权限有限的数据库连接</li>
<li>不要把机密信息明文存放，请加密或者<code>hash</code>掉密码和敏感的信息</li>
</ul>
<h2 id="XSS（cross-site-scripting）跨站脚本攻击"><a href="#XSS（cross-site-scripting）跨站脚本攻击" class="headerlink" title="XSS（cross-site scripting）跨站脚本攻击"></a>XSS（cross-site scripting）跨站脚本攻击</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>指的是攻击者往<code>WEB</code>页面里插入恶意<code>html</code>标签或者<code>javascript</code>代码。比如：攻击者在论坛中加一个恶意表单，骗取用户点击后，窃取<code>cookie</code>中用户的私密信息；或者攻击者在论坛中加一个恶意表单，当用户提交表单的时候，却把信息传送到攻击者的服务器中，而不是用户原本以为的信任站点</p>
<h3 id="防范-1"><a href="#防范-1" class="headerlink" title="防范"></a>防范</h3><ul>
<li>用户输入的地方和变量都需要仔细检查长度</li>
<li>对尖括号、引号、分号等进行转义</li>
<li>任何内容写到页面之前都必须加以<code>encode</code></li>
<li><code>CSP</code>白名单</li>
</ul>
<h2 id="CSRF（cross-site-request-forgery）跨站请求伪造"><a href="#CSRF（cross-site-request-forgery）跨站请求伪造" class="headerlink" title="CSRF（cross-site request forgery）跨站请求伪造"></a>CSRF（cross-site request forgery）跨站请求伪造</h2><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>攻击者通过一些技术手段欺骗用户的浏览器去访问用户曾经认证过的网站并执行一些操作（如发送邮件、发消息、甚至财产操作如转账和购买商品等）。由于浏览器曾经认证过，所以被访问的网站会认为是真正的用户操作而去执行。这利用了<code>web</code>登录身份认证的一个漏洞：<strong>简单的认证只能保证请求来自用户的浏览器，但不能识别请求是用户自愿发出的</strong></p>
<h3 id="防范-2"><a href="#防范-2" class="headerlink" title="防范"></a>防范</h3><ul>
<li><code>get</code>请求不对数据进行修改</li>
<li>不让第三方网站访问到用户<code>cookie</code>：对cookie设置SameSite属性，该属性表示<code>cookie</code>不随着跨域请求发送</li>
<li>阻止第三方网站请求接口：通过验证<code>referer</code>来判断请求是否为第三方网站发起的</li>
<li>请求是附带验证信息，比如验证码或者<code>token</code></li>
</ul>
<h2 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h2><h3 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h3><p>是一种<strong>视觉欺骗</strong>的攻击手段。攻击者将需要被攻击的网站通过<code>iframe</code>嵌套的方式嵌入自己的网页中，并将<code>iframe</code>设置为透明，在页面中透出一个按钮又到用户点击</p>
<h3 id="防范-3"><a href="#防范-3" class="headerlink" title="防范"></a>防范</h3><ul>
<li><p><strong>设置HTTP头：X-FRAME-OPTIONS</strong></p>
<p>这个HTTP响应头就是为了防御用<code>iframe</code>嵌套的点击劫持</p>
<p>该响应头有三个值，分别为</p>
<ul>
<li><code>DENY</code>：表示页面不允许通过<code>iframe</code>的方式展示</li>
<li><code>SAMEORIGIN</code>：表示页面可以再相同域名下通过<code>iframe</code>的方式展示</li>
<li><code>ALLOW-FROM</code>：表示页面可以再指定来源的<code>iframe</code>中展示</li>
</ul>
</li>
<li><p><strong>JS防御</strong></p>
<p>当通过<code>iframe</code>的方式加载页面时，攻击者的网页直接不显示所有内容了</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">id</span>=<span class="string">"click-jack"</span>&gt;</span></span><br><span class="line">    html &#123;</span><br><span class="line">    	display: none !important;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    if (self == top) &#123;</span><br><span class="line"><span class="javascript">    	<span class="keyword">var</span> style = <span class="built_in">document</span>.getElementById(<span class="string">'click-jack'</span>)</span></span><br><span class="line"><span class="javascript">    	<span class="built_in">document</span>.body.removeChild(style)</span></span><br><span class="line"><span class="actionscript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line">    	top.location = self.location</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span></span></span><br></pre></td></tr></table></figure>



</li>
</ul>
<h2 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h2><h3 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h3><p><strong>攻击者同时与服务器和客户端建立起了连接，并让对方认为连接是安全的，但是实际上整个通信过程都被攻击者控制了。</strong>攻击者不仅能获得双方的通信信息，还能修改通信信息</p>
<h3 id="防范-4"><a href="#防范-4" class="headerlink" title="防范"></a>防范</h3><p>防御中间人攻击其实并不难，只<strong>需要增加一个安全通道来传输信息</strong>。HTTPS 就可以用来防御中间人攻击，但是并不是说使用了 HTTPS 就可以高枕无忧了，因为如果你没有完全关闭 HTTP 访问的话，攻击方可以通过某些方式将 HTTPS 降级为 HTTP 从而实现中间人攻击。</p>
]]></content>
  </entry>
</search>
